{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Final Project"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "by Mohammad Fanous \n",
    "\n",
    "This notebook serves as my final project for this class. \n",
    "\n",
    "As a start, I downloaded a public data set off Kaggle, that records the urban population values for countries in the world between 1960 and 2020. I will read it in shortly.\n",
    "\n",
    "Through working on this data set, I am interested in learning about the population changes for different countries, especially war-torn countries and countries in crises. I hope to answer the following question: Would there be a relationship between the unusal urban population trends and the ongoing national and international events? Short answer should be yes, but let's test that and learn something new! \n",
    "\n",
    "I believe this question is important as while getting to an answer, we would certainly learn something new about a country's history or even its present situation. And in general, population analysis could be crucial for understanding a certain population's style of living, history, or possibly traditions. It is also important when dealing with overpopulation issues. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# First Element: Reading in the Dataset\n",
    "Now let's get started! First, I'll import stuff we might need and read in the dataset (will call the resulting pandas table, \"pop\") in the two cells below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt #importing the libraries we would need in this notebook\n",
    "import pandas as pd\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "pop=pd.read_csv('urban_total.csv') #reading in the csv file urban_total.csv as a pandas table and calling it pop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nice! Now, let's take a look at pop:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>1960</th>\n",
       "      <th>1961</th>\n",
       "      <th>1962</th>\n",
       "      <th>1963</th>\n",
       "      <th>1964</th>\n",
       "      <th>1965</th>\n",
       "      <th>...</th>\n",
       "      <th>2012</th>\n",
       "      <th>2013</th>\n",
       "      <th>2014</th>\n",
       "      <th>2015</th>\n",
       "      <th>2016</th>\n",
       "      <th>2017</th>\n",
       "      <th>2018</th>\n",
       "      <th>2019</th>\n",
       "      <th>2020</th>\n",
       "      <th>Unnamed: 65</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>27525.0</td>\n",
       "      <td>28139.0</td>\n",
       "      <td>28537.0</td>\n",
       "      <td>28763.0</td>\n",
       "      <td>28922.0</td>\n",
       "      <td>29080.0</td>\n",
       "      <td>...</td>\n",
       "      <td>44059.0</td>\n",
       "      <td>44351.0</td>\n",
       "      <td>44666.0</td>\n",
       "      <td>44978.0</td>\n",
       "      <td>45293.0</td>\n",
       "      <td>45614.0</td>\n",
       "      <td>45949.0</td>\n",
       "      <td>46294.0</td>\n",
       "      <td>46654.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Africa Eastern and Southern</td>\n",
       "      <td>AFE</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>19239140.0</td>\n",
       "      <td>20049454.0</td>\n",
       "      <td>20897622.0</td>\n",
       "      <td>21807831.0</td>\n",
       "      <td>22780115.0</td>\n",
       "      <td>23806156.0</td>\n",
       "      <td>...</td>\n",
       "      <td>181061819.0</td>\n",
       "      <td>188513993.0</td>\n",
       "      <td>196270604.0</td>\n",
       "      <td>204322110.0</td>\n",
       "      <td>212669776.0</td>\n",
       "      <td>221319466.0</td>\n",
       "      <td>230276235.0</td>\n",
       "      <td>239539517.0</td>\n",
       "      <td>249112475.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>755835.0</td>\n",
       "      <td>796271.0</td>\n",
       "      <td>839385.0</td>\n",
       "      <td>885227.0</td>\n",
       "      <td>934134.0</td>\n",
       "      <td>986074.0</td>\n",
       "      <td>...</td>\n",
       "      <td>7528589.0</td>\n",
       "      <td>7865068.0</td>\n",
       "      <td>8204880.0</td>\n",
       "      <td>8535606.0</td>\n",
       "      <td>8852834.0</td>\n",
       "      <td>9164768.0</td>\n",
       "      <td>9476982.0</td>\n",
       "      <td>9797274.0</td>\n",
       "      <td>10131490.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Africa Western and Central</td>\n",
       "      <td>AFW</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>14141671.0</td>\n",
       "      <td>14813809.0</td>\n",
       "      <td>15527606.0</td>\n",
       "      <td>16290977.0</td>\n",
       "      <td>17102150.0</td>\n",
       "      <td>17961784.0</td>\n",
       "      <td>...</td>\n",
       "      <td>158838089.0</td>\n",
       "      <td>165607296.0</td>\n",
       "      <td>172602709.0</td>\n",
       "      <td>179836016.0</td>\n",
       "      <td>187305752.0</td>\n",
       "      <td>195016097.0</td>\n",
       "      <td>202961117.0</td>\n",
       "      <td>211133789.0</td>\n",
       "      <td>219531155.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>569223.0</td>\n",
       "      <td>597286.0</td>\n",
       "      <td>628376.0</td>\n",
       "      <td>660175.0</td>\n",
       "      <td>691526.0</td>\n",
       "      <td>721552.0</td>\n",
       "      <td>...</td>\n",
       "      <td>15383123.0</td>\n",
       "      <td>16130308.0</td>\n",
       "      <td>16900844.0</td>\n",
       "      <td>17691524.0</td>\n",
       "      <td>18502164.0</td>\n",
       "      <td>19332895.0</td>\n",
       "      <td>20184724.0</td>\n",
       "      <td>21061028.0</td>\n",
       "      <td>21962884.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>261</th>\n",
       "      <td>Kosovo</td>\n",
       "      <td>XKX</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>262</th>\n",
       "      <td>Yemen Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>483697.0</td>\n",
       "      <td>510127.0</td>\n",
       "      <td>538117.0</td>\n",
       "      <td>567679.0</td>\n",
       "      <td>598799.0</td>\n",
       "      <td>631541.0</td>\n",
       "      <td>...</td>\n",
       "      <td>8065869.0</td>\n",
       "      <td>8439119.0</td>\n",
       "      <td>8822595.0</td>\n",
       "      <td>9215168.0</td>\n",
       "      <td>9615916.0</td>\n",
       "      <td>10024986.0</td>\n",
       "      <td>10442487.0</td>\n",
       "      <td>10869523.0</td>\n",
       "      <td>11306428.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>263</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>7971773.0</td>\n",
       "      <td>8200255.0</td>\n",
       "      <td>8427007.0</td>\n",
       "      <td>8662568.0</td>\n",
       "      <td>8906583.0</td>\n",
       "      <td>9158948.0</td>\n",
       "      <td>...</td>\n",
       "      <td>33428280.0</td>\n",
       "      <td>34248628.0</td>\n",
       "      <td>35078456.0</td>\n",
       "      <td>35905875.0</td>\n",
       "      <td>36726640.0</td>\n",
       "      <td>37540921.0</td>\n",
       "      <td>38348227.0</td>\n",
       "      <td>39149715.0</td>\n",
       "      <td>39946775.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>264</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>557193.0</td>\n",
       "      <td>599672.0</td>\n",
       "      <td>645119.0</td>\n",
       "      <td>695944.0</td>\n",
       "      <td>762426.0</td>\n",
       "      <td>834489.0</td>\n",
       "      <td>...</td>\n",
       "      <td>5837266.0</td>\n",
       "      <td>6099735.0</td>\n",
       "      <td>6372742.0</td>\n",
       "      <td>6654568.0</td>\n",
       "      <td>6944320.0</td>\n",
       "      <td>7243007.0</td>\n",
       "      <td>7551639.0</td>\n",
       "      <td>7871715.0</td>\n",
       "      <td>8204576.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>265</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>476164.0</td>\n",
       "      <td>500665.0</td>\n",
       "      <td>528409.0</td>\n",
       "      <td>567387.0</td>\n",
       "      <td>609177.0</td>\n",
       "      <td>653686.0</td>\n",
       "      <td>...</td>\n",
       "      <td>4306228.0</td>\n",
       "      <td>4359432.0</td>\n",
       "      <td>4416224.0</td>\n",
       "      <td>4473872.0</td>\n",
       "      <td>4531238.0</td>\n",
       "      <td>4589452.0</td>\n",
       "      <td>4650597.0</td>\n",
       "      <td>4717307.0</td>\n",
       "      <td>4792105.0</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>266 rows × 66 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                    Country Name Country Code    Indicator Name  \\\n",
       "0                          Aruba          ABW  Urban population   \n",
       "1    Africa Eastern and Southern          AFE  Urban population   \n",
       "2                    Afghanistan          AFG  Urban population   \n",
       "3     Africa Western and Central          AFW  Urban population   \n",
       "4                         Angola          AGO  Urban population   \n",
       "..                           ...          ...               ...   \n",
       "261                       Kosovo          XKX  Urban population   \n",
       "262                   Yemen Rep.          YEM  Urban population   \n",
       "263                 South Africa          ZAF  Urban population   \n",
       "264                       Zambia          ZMB  Urban population   \n",
       "265                     Zimbabwe          ZWE  Urban population   \n",
       "\n",
       "    Indicator Code        1960        1961        1962        1963  \\\n",
       "0      SP.URB.TOTL     27525.0     28139.0     28537.0     28763.0   \n",
       "1      SP.URB.TOTL  19239140.0  20049454.0  20897622.0  21807831.0   \n",
       "2      SP.URB.TOTL    755835.0    796271.0    839385.0    885227.0   \n",
       "3      SP.URB.TOTL  14141671.0  14813809.0  15527606.0  16290977.0   \n",
       "4      SP.URB.TOTL    569223.0    597286.0    628376.0    660175.0   \n",
       "..             ...         ...         ...         ...         ...   \n",
       "261    SP.URB.TOTL         NaN         NaN         NaN         NaN   \n",
       "262    SP.URB.TOTL    483697.0    510127.0    538117.0    567679.0   \n",
       "263    SP.URB.TOTL   7971773.0   8200255.0   8427007.0   8662568.0   \n",
       "264    SP.URB.TOTL    557193.0    599672.0    645119.0    695944.0   \n",
       "265    SP.URB.TOTL    476164.0    500665.0    528409.0    567387.0   \n",
       "\n",
       "           1964        1965  ...         2012         2013         2014  \\\n",
       "0       28922.0     29080.0  ...      44059.0      44351.0      44666.0   \n",
       "1    22780115.0  23806156.0  ...  181061819.0  188513993.0  196270604.0   \n",
       "2      934134.0    986074.0  ...    7528589.0    7865068.0    8204880.0   \n",
       "3    17102150.0  17961784.0  ...  158838089.0  165607296.0  172602709.0   \n",
       "4      691526.0    721552.0  ...   15383123.0   16130308.0   16900844.0   \n",
       "..          ...         ...  ...          ...          ...          ...   \n",
       "261         NaN         NaN  ...          NaN          NaN          NaN   \n",
       "262    598799.0    631541.0  ...    8065869.0    8439119.0    8822595.0   \n",
       "263   8906583.0   9158948.0  ...   33428280.0   34248628.0   35078456.0   \n",
       "264    762426.0    834489.0  ...    5837266.0    6099735.0    6372742.0   \n",
       "265    609177.0    653686.0  ...    4306228.0    4359432.0    4416224.0   \n",
       "\n",
       "            2015         2016         2017         2018         2019  \\\n",
       "0        44978.0      45293.0      45614.0      45949.0      46294.0   \n",
       "1    204322110.0  212669776.0  221319466.0  230276235.0  239539517.0   \n",
       "2      8535606.0    8852834.0    9164768.0    9476982.0    9797274.0   \n",
       "3    179836016.0  187305752.0  195016097.0  202961117.0  211133789.0   \n",
       "4     17691524.0   18502164.0   19332895.0   20184724.0   21061028.0   \n",
       "..           ...          ...          ...          ...          ...   \n",
       "261          NaN          NaN          NaN          NaN          NaN   \n",
       "262    9215168.0    9615916.0   10024986.0   10442487.0   10869523.0   \n",
       "263   35905875.0   36726640.0   37540921.0   38348227.0   39149715.0   \n",
       "264    6654568.0    6944320.0    7243007.0    7551639.0    7871715.0   \n",
       "265    4473872.0    4531238.0    4589452.0    4650597.0    4717307.0   \n",
       "\n",
       "            2020  Unnamed: 65  \n",
       "0        46654.0          NaN  \n",
       "1    249112475.0          NaN  \n",
       "2     10131490.0          NaN  \n",
       "3    219531155.0          NaN  \n",
       "4     21962884.0          NaN  \n",
       "..           ...          ...  \n",
       "261          NaN          NaN  \n",
       "262   11306428.0          NaN  \n",
       "263   39946775.0          NaN  \n",
       "264    8204576.0          NaN  \n",
       "265    4792105.0          NaN  \n",
       "\n",
       "[266 rows x 66 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pop #printing the pandas table pop"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Second Element: Working on a Subset of the Data\n",
    "Here I will take subsets of the data (create smaller tables for specific countries) that I will probably use later on in the notebook. \n",
    "Before I do that, however, I would have to fix the table a bit, because it is hard to work with it as it is right now. I wonder if there's a way to list all the years in one \"Year\" column instead of in separate columns (and of course their population values in a single \"Population\" column). \n",
    "After some research, it looks like we can fix it using the code below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>27525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Africa Eastern and Southern</td>\n",
       "      <td>AFE</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>19239140.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>755835.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Africa Western and Central</td>\n",
       "      <td>AFW</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>14141671.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>569223.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16487</th>\n",
       "      <td>Kosovo</td>\n",
       "      <td>XKX</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>Unnamed: 65</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16488</th>\n",
       "      <td>Yemen Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>Unnamed: 65</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16489</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>Unnamed: 65</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16490</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>Unnamed: 65</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16491</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>Unnamed: 65</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16492 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Country Name Country Code    Indicator Name  \\\n",
       "0                            Aruba          ABW  Urban population   \n",
       "1      Africa Eastern and Southern          AFE  Urban population   \n",
       "2                      Afghanistan          AFG  Urban population   \n",
       "3       Africa Western and Central          AFW  Urban population   \n",
       "4                           Angola          AGO  Urban population   \n",
       "...                            ...          ...               ...   \n",
       "16487                       Kosovo          XKX  Urban population   \n",
       "16488                   Yemen Rep.          YEM  Urban population   \n",
       "16489                 South Africa          ZAF  Urban population   \n",
       "16490                       Zambia          ZMB  Urban population   \n",
       "16491                     Zimbabwe          ZWE  Urban population   \n",
       "\n",
       "      Indicator Code         Year  Population  \n",
       "0        SP.URB.TOTL         1960     27525.0  \n",
       "1        SP.URB.TOTL         1960  19239140.0  \n",
       "2        SP.URB.TOTL         1960    755835.0  \n",
       "3        SP.URB.TOTL         1960  14141671.0  \n",
       "4        SP.URB.TOTL         1960    569223.0  \n",
       "...              ...          ...         ...  \n",
       "16487    SP.URB.TOTL  Unnamed: 65         NaN  \n",
       "16488    SP.URB.TOTL  Unnamed: 65         NaN  \n",
       "16489    SP.URB.TOTL  Unnamed: 65         NaN  \n",
       "16490    SP.URB.TOTL  Unnamed: 65         NaN  \n",
       "16491    SP.URB.TOTL  Unnamed: 65         NaN  \n",
       "\n",
       "[16492 rows x 6 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Fixing the columns of the table pop'''\n",
    "newpop=pop.melt(id_vars=[\"Country Name\", \"Country Code\",'Indicator Name','Indicator Code'], \n",
    "        var_name=\"Year\",\n",
    "        value_name=\"Population\") #found and used a method that fixes the table columns, called \"melt\"\n",
    "newpop #print out the new fixed (thinner) table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nice!! That new table \"newpop\" looks much better! But have you noticed those annoying \"NaN\"s by the end. I'll drop them for my peace of mind (and of course to avoid any issues beforehand):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Aruba</td>\n",
       "      <td>ABW</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>27525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Africa Eastern and Southern</td>\n",
       "      <td>AFE</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>19239140.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Afghanistan</td>\n",
       "      <td>AFG</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>755835.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Africa Western and Central</td>\n",
       "      <td>AFW</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>14141671.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Angola</td>\n",
       "      <td>AGO</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>569223.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16220</th>\n",
       "      <td>Samoa</td>\n",
       "      <td>WSM</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>35494.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16222</th>\n",
       "      <td>Yemen Rep.</td>\n",
       "      <td>YEM</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>11306428.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16223</th>\n",
       "      <td>South Africa</td>\n",
       "      <td>ZAF</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>39946775.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16224</th>\n",
       "      <td>Zambia</td>\n",
       "      <td>ZMB</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>8204576.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16225</th>\n",
       "      <td>Zimbabwe</td>\n",
       "      <td>ZWE</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>4792105.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>16001 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      Country Name Country Code    Indicator Name  \\\n",
       "0                            Aruba          ABW  Urban population   \n",
       "1      Africa Eastern and Southern          AFE  Urban population   \n",
       "2                      Afghanistan          AFG  Urban population   \n",
       "3       Africa Western and Central          AFW  Urban population   \n",
       "4                           Angola          AGO  Urban population   \n",
       "...                            ...          ...               ...   \n",
       "16220                        Samoa          WSM  Urban population   \n",
       "16222                   Yemen Rep.          YEM  Urban population   \n",
       "16223                 South Africa          ZAF  Urban population   \n",
       "16224                       Zambia          ZMB  Urban population   \n",
       "16225                     Zimbabwe          ZWE  Urban population   \n",
       "\n",
       "      Indicator Code  Year  Population  \n",
       "0        SP.URB.TOTL  1960     27525.0  \n",
       "1        SP.URB.TOTL  1960  19239140.0  \n",
       "2        SP.URB.TOTL  1960    755835.0  \n",
       "3        SP.URB.TOTL  1960  14141671.0  \n",
       "4        SP.URB.TOTL  1960    569223.0  \n",
       "...              ...   ...         ...  \n",
       "16220    SP.URB.TOTL  2020     35494.0  \n",
       "16222    SP.URB.TOTL  2020  11306428.0  \n",
       "16223    SP.URB.TOTL  2020  39946775.0  \n",
       "16224    SP.URB.TOTL  2020   8204576.0  \n",
       "16225    SP.URB.TOTL  2020   4792105.0  \n",
       "\n",
       "[16001 rows x 6 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "newpop=newpop.dropna() #drop the NaN's because they're annoying\n",
    "newpop #printing the new table without the NaN's"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Perfect! Now we can easily take subsets of the data:\n",
    "\n",
    "For now, I'll create three subset tables: for Lebanon, Syria, and Ukraine and call them: popLB, popSA, and popUE respectively:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>764264.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>821157.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>662</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1962</td>\n",
       "      <td>880861.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>928</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1963</td>\n",
       "      <td>942378.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1194</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1964</td>\n",
       "      <td>1004429.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15026</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2016</td>\n",
       "      <td>5926427.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15292</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2017</td>\n",
       "      <td>6030303.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15558</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2018</td>\n",
       "      <td>6076955.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15824</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>6084990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16090</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>6069524.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Country Name Country Code    Indicator Name Indicator Code  Year  \\\n",
       "130        Lebanon          LBN  Urban population    SP.URB.TOTL  1960   \n",
       "396        Lebanon          LBN  Urban population    SP.URB.TOTL  1961   \n",
       "662        Lebanon          LBN  Urban population    SP.URB.TOTL  1962   \n",
       "928        Lebanon          LBN  Urban population    SP.URB.TOTL  1963   \n",
       "1194       Lebanon          LBN  Urban population    SP.URB.TOTL  1964   \n",
       "...            ...          ...               ...            ...   ...   \n",
       "15026      Lebanon          LBN  Urban population    SP.URB.TOTL  2016   \n",
       "15292      Lebanon          LBN  Urban population    SP.URB.TOTL  2017   \n",
       "15558      Lebanon          LBN  Urban population    SP.URB.TOTL  2018   \n",
       "15824      Lebanon          LBN  Urban population    SP.URB.TOTL  2019   \n",
       "16090      Lebanon          LBN  Urban population    SP.URB.TOTL  2020   \n",
       "\n",
       "       Population  \n",
       "130      764264.0  \n",
       "396      821157.0  \n",
       "662      880861.0  \n",
       "928      942378.0  \n",
       "1194    1004429.0  \n",
       "...           ...  \n",
       "15026   5926427.0  \n",
       "15292   6030303.0  \n",
       "15558   6076955.0  \n",
       "15824   6084990.0  \n",
       "16090   6069524.0  \n",
       "\n",
       "[61 rows x 6 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Creating a smaller table with only Lebanon's data'''\n",
    "popLB=newpop[newpop['Country Name'].str.contains(\"Lebanon\")] #create the first subset table for data about Lebanon and call it popLB\n",
    "popLB #print this table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>227</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>1683373.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>493</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>1765941.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>759</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1962</td>\n",
       "      <td>1854808.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1025</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1963</td>\n",
       "      <td>1948103.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1291</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1964</td>\n",
       "      <td>2046282.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15123</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2016</td>\n",
       "      <td>9227932.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15389</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2017</td>\n",
       "      <td>9146183.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15655</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2018</td>\n",
       "      <td>9177784.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15921</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>9358017.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16187</th>\n",
       "      <td>Syrian Arab Republic</td>\n",
       "      <td>SYR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>9708489.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "               Country Name Country Code    Indicator Name Indicator Code  \\\n",
       "227    Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "493    Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "759    Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "1025   Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "1291   Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "...                     ...          ...               ...            ...   \n",
       "15123  Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "15389  Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "15655  Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "15921  Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "16187  Syrian Arab Republic          SYR  Urban population    SP.URB.TOTL   \n",
       "\n",
       "       Year  Population  \n",
       "227    1960   1683373.0  \n",
       "493    1961   1765941.0  \n",
       "759    1962   1854808.0  \n",
       "1025   1963   1948103.0  \n",
       "1291   1964   2046282.0  \n",
       "...     ...         ...  \n",
       "15123  2016   9227932.0  \n",
       "15389  2017   9146183.0  \n",
       "15655  2018   9177784.0  \n",
       "15921  2019   9358017.0  \n",
       "16187  2020   9708489.0  \n",
       "\n",
       "[61 rows x 6 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Creating a smaller table with only Syria's data'''\n",
    "popSA=newpop[newpop['Country Name'].str.contains(\"Syria\")] #create the first subset table for data about Lebanon and call it popSA\n",
    "popSA #print this table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>248</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>19963641.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>514</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>20541164.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>780</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1962</td>\n",
       "      <td>21129701.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1046</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1963</td>\n",
       "      <td>21721790.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1312</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1964</td>\n",
       "      <td>22308886.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15144</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2016</td>\n",
       "      <td>31122532.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15410</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2017</td>\n",
       "      <td>31043768.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15676</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2018</td>\n",
       "      <td>30946609.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15942</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>30836427.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16208</th>\n",
       "      <td>Ukraine</td>\n",
       "      <td>UKR</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>30721277.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Country Name Country Code    Indicator Name Indicator Code  Year  \\\n",
       "248        Ukraine          UKR  Urban population    SP.URB.TOTL  1960   \n",
       "514        Ukraine          UKR  Urban population    SP.URB.TOTL  1961   \n",
       "780        Ukraine          UKR  Urban population    SP.URB.TOTL  1962   \n",
       "1046       Ukraine          UKR  Urban population    SP.URB.TOTL  1963   \n",
       "1312       Ukraine          UKR  Urban population    SP.URB.TOTL  1964   \n",
       "...            ...          ...               ...            ...   ...   \n",
       "15144      Ukraine          UKR  Urban population    SP.URB.TOTL  2016   \n",
       "15410      Ukraine          UKR  Urban population    SP.URB.TOTL  2017   \n",
       "15676      Ukraine          UKR  Urban population    SP.URB.TOTL  2018   \n",
       "15942      Ukraine          UKR  Urban population    SP.URB.TOTL  2019   \n",
       "16208      Ukraine          UKR  Urban population    SP.URB.TOTL  2020   \n",
       "\n",
       "       Population  \n",
       "248    19963641.0  \n",
       "514    20541164.0  \n",
       "780    21129701.0  \n",
       "1046   21721790.0  \n",
       "1312   22308886.0  \n",
       "...           ...  \n",
       "15144  31122532.0  \n",
       "15410  31043768.0  \n",
       "15676  30946609.0  \n",
       "15942  30836427.0  \n",
       "16208  30721277.0  \n",
       "\n",
       "[61 rows x 6 columns]"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Creating a smaller table with only Ukraine's data'''\n",
    "popUE=newpop[newpop['Country Name'].str.contains(\"Ukraine\")] #create the first subset table for data about Lebanon and call it popUE\n",
    "popUE #print this smaller table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great, these 3 tables look good!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Third Element: Plotting One Parameter Vs Another\n",
    "Now, let's see how the plots will look like for these 3 countries:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For Lebanon:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x7f5874fca910>]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(popLB.Year,popLB.Population) #plotting the urban population vs years (1960-2020) for Lebanon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Oh, the terribly-looking x-axis again... but that makes sense because I have 60 years to be displayed on a 4 cm x-axis... Now let's use Andrea's method of fixing it in class 11: simply drop the NaN's which I already did, and use lin-space to create, for example, 6 equally-spaced years:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''Fixing the x-axis for Lebanon's plot'''\n",
    "popLB.index=popLB.index-min(popLB.index) #getting the index to start from zero\n",
    "desind=np.linspace(min(popLB.index),max(popLB.index),6,dtype=int) #creating 6 equally spaced indices\n",
    "plt.plot(popLB['Year'],popLB['Population'],'.') #plotting the plot urban pop vs years for Lebanon\n",
    "plt.xticks(popLB.Year[desind],rotation=50) #using xticks to print 6 equally spaced dates at the indices generated above\n",
    "plt.xlabel('Years') #label x-axis\n",
    "plt.ylabel('Population') #label y-axis\n",
    "plt.title('Urban Population in Lebanon'); #add title"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It worked! That looks much clearer. I'll do the same thing for the remaining plots.\n",
    "\n",
    "For Syria:\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''Fixing the x-axis for Syria's plot'''\n",
    "popSA.index=popSA.index-min(popSA.index) #getting the index to start from zero\n",
    "desind=np.linspace(min(popSA.index),max(popSA.index),6,dtype=int) #creating 6 equally spaced indices\n",
    "plt.plot(popSA['Year'],popSA['Population'],'.') #plotting the plot urban pop vs years for Syria\n",
    "plt.xticks(popSA.Year[desind],rotation=50) #using xticks to print 6 equally spaced dates at the indices generated above\n",
    "plt.xlabel('Years') #label x-axis\n",
    "plt.ylabel('Population') #label y-axis\n",
    "plt.title('Urban Population in Syria'); #add title"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great, now for Ukraine:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "'''Fixing the x-axis for Ukraine's plot'''\n",
    "popUE.index=popUE.index-min(popUE.index) #getting the index to start from zero\n",
    "desind=np.linspace(min(popUE.index),max(popUE.index),6,dtype=int) #creating 6 equally spaced indices\n",
    "plt.plot(popUE['Year'],popUE['Population'],'.') #plotting the plot urban pop vs years for Ukraine\n",
    "plt.xticks(popUE.Year[desind],rotation=50) #using xticks to print 6 equally spaced dates at the indices generated above\n",
    "plt.xlabel('Years') #label x-axis\n",
    "plt.ylabel('Population') #label y-axis\n",
    "plt.title('Urban Population in Ukraine'); #add title"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fourth Element : class and method to fix the x-axis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While plotting the 3 plots above, I noticed that I was merely changing the subtable's name each time. So, I thought we could make that more general by creating a class.     \n",
    "The class \"fixplot\" below contains a method called \"fixing\" that is supposed to take a specific country name, create a subset table for that country and plot its population vs the years with a good-looking x-axis for sure (including appropriate labels and title):"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Create a class that accept a specific country name, create a subset with the country's data, plots its population vs time, and of course fixes the x-axis'''\n",
    "class fixplot: #defining the class \"fixplot\"\n",
    "    def __init__(self, xvalues, yvalues):  #the default method that must be present \"__init__\"\n",
    "        self.xdata = xvalues   \n",
    "        self.ydata = yvalues  \n",
    "    def fixing(CountryName): #define the method fixing that does all that's mentioned in the comment block above\n",
    "        pop1=newpop[newpop['Country Name'].str.contains(CountryName)] #creating a subset of the data (for a specific country)\n",
    "        pop1.index=pop1.index-min(pop1.index) #starting the index from zero\n",
    "        desind=np.linspace(min(pop1.index),max(pop1.index),6,dtype=int) #creating 6 equally spaced indices\n",
    "        plt.plot(pop1['Year'],pop1['Population'],'.') #plotting the plot urban pop vs years for the chosen country\n",
    "        plt.xticks(pop1.Year[desind],rotation=50) #using xticks to print 6 equally spaced dates at the indices generated above\n",
    "        plt.xlabel('Years') #label x-axis\n",
    "        plt.ylabel('Population') #label y-axis\n",
    "        plt.title('Urban Population in %s' %CountryName); #add a title to the plot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great, now let's see if it works. I'll try it on Australia to check:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fixplot.fixing('Australia') #testing the method \"fixing\" in the class above, turns out it works!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It does! "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fifth Element: Correlation Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In this section, I want to test if there's a correlation between the urban populations in Lebanon and Syria between 2011 and 2014. I'll tell why later on in the conclusions section. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, let's make another smaller subset of the 2010-2015 population values for each country:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13566    4550937.0\n",
       "13832    4852949.0\n",
       "14098    5191037.0\n",
       "14364    5506402.0\n",
       "Name: Population, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popLBs=popLB['Population'].loc[(popLB.Year>'2010')&(popLB.Year<'2015')] #finding Lebanon's population data between 2011 and 2014\n",
    "popLBs #printing the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "13566    11506454.0\n",
       "13832    10946032.0\n",
       "14098    10284372.0\n",
       "14364     9636016.0\n",
       "Name: Population, dtype: float64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popSAs=popSA['Population'].loc[(popSA.Year>'2010')&(popSA.Year<'2015')] #finding Syria's population data between 2011 and 2014\n",
    "popSAs #printing the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.9997577037470852"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popSAs.corr(popLBs, method='pearson') #finding the correlation between the two. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As I expected, there's a strong negative correlation between the populations of the two countries and if we go on into later years this negative correlation decreases, which makes sense to me. I will tell you about all I'm thinking in the conclusions section."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Surprising Result + Class fix "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "While I was plotting the populations for China and Sudan, I had a weird-looking odd graph. My code was something like this:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "popCA=newpop[newpop['Country Name'].str.contains('China')] #smaller table for China's data called popCA\n",
    "plt.plot(popCA.Year,popCA.Population); #plot China's population data vs the years"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAEDCAYAAAAlRP8qAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuMiwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8vihELAAAACXBIWXMAAAsTAAALEwEAmpwYAABcZUlEQVR4nO19d5xcR5XuVz1Ro1HWKEfbkm3hgEE2zjbGgImGJdmEZRdYP1ji7j54G3iwCyzsLo+4mGCSMQv2gklebIxtnCOWkS3LkpVH0kianDv3vfX+qLrdVbdOT5eme6SZ0fl+P/+sPl03zO2+3/36q1PnCCklGAwGgzH1kTjeJ8BgMBiM2oAJncFgMKYJmNAZDAZjmoAJncFgMKYJmNAZDAZjmoAJncFgMKYJjiuhCyF+IIToFkJs9Rj7FSHE0/q/nUKIwWNwigwGgzFlII5nHroQ4lIAowBuklKecRTbfRjAOVLK90zYyTEYDMYUw3FV6FLKBwH0mzEhxMlCiDuFEE8JIR4SQpxGbHotgJuPyUkyGAzGFEH98T4BAjcAeL+UcpcQ4iUAvgngiuhNIcRqAGsB3Huczo/BYDAmJSYVoQshWgFcCODnQogo3BQbdg2AW6WUwbE8NwaDwZjsmFSEDmUBDUopXzjGmGsAfPDYnA6DwWBMHUyqtEUp5TCAfUKItwCAUDg7el/76fMAPHacTpHBYDAmLY532uLNUOR8qhCiQwjxXgDvAPBeIcQzAJ4DcLWxyTUAbpFcIpLBYDAcHNe0RQaDwWDUDpPKcmEwGAzG+FFxUlQI8QMArwXQXW7xjxDicgBfBdAAoFdKeVml/S5cuFCuWbPmKE6VwWAwGE899VSvlLKNes8ny+VGAN8AcBP1phBiLlSu+FVSygNCiEU+J7VmzRps2rTJZyiDwWAwNIQQ+8u9V9FyoVZzxvB2AL+UUh7Q47uP+gwZDAaDUTVq4aGvBzBPCHG/Xq7/5+UGCiGuE0JsEkJs6unpqcGhGQwGgxGhFoReD+DFAF4D4JUA/q8QYj01UEp5g5Ryo5RyY1sbaQExGAwGY5yoxUrRDgB9UsokgKQQ4kEAZwPYWYN9MxgMBsMTtVDovwFwsRCiXgjRAuAlALbXYL8MBoPBOAr4pC3eDOByAAuFEB0APg2Vnggp5bellNuFEHcC2AIgBPA9KWXFhhUMBoPBqC0qErqU8lqPMV8E8MWanBGDwWAwxgVeKcpgMBjHEPc+34XDg+kJ2TcTOoPBYBxDfOC//oSfPnFgQvbNhM5gMBjHCEEokS2EKIQTUxSRCZ3BYDCOEXKFcEL3z4TOYDAYxwhM6AwGgzFNkC1MbCtkJnQGg8E4RsiyQmcwGIyph0IQ4jVffwj3Pt9VjDGhMxgMxhREMhvgucPD2Nk1Woyx5cJgMBhTENnAJW+eFGUwGIwpiGzeJW+2XBgMBmMKgiJvVugMBoMxBUH55azQGQwGY5IjVwjxkZs3Y0+POQHKCp3BYDCmHDqHMrjtmcPY1N5fjFHkzVkuDAaDMcnha6+wQmcwGIxJDoq8s/lJ6KELIX4ghOgWQozZVk4Ica4QoiCEeHPtTo/BYDAmP6aSQr8RwFVjDRBC1AH4dwB31eCcGAwGY0oh45lzftw9dCnlgwD6Kwz7MIBfAOiuxUkxGAzGZMVQKo83XP8I2nuTxRhF1JQanwwKfUwIIZYDeCOAb3mMvU4IsUkIsamnp6faQzMYDMYxx76+JJ4+OIgdXSPFGL0qdBJ66B74KoD/I6WseKZSyhuklBullBvb2tpqcGgGg8E4tsh4Tnb6xmqJ+hrsYyOAW4QQALAQwKuFEAUp5a9rsG8Gg8GYVPD1xo9HLZeqCV1KuTb6txDiRgC/ZTJnMBjTFb7piLTlMrGTohUJXQhxM4DLASwUQnQA+DSABgCQUn57Qs+OwWAwjiOklNh+ZAQbls0uxjJkzrnfBOhET4pWJHQp5bW+O5NS/kVVZ8NgMBiTCE8fHMQbv/kobv/IxXjBsjkAyin08fvqtQSvFGUwGIwy6E/mAACjmUIxRip0T8tl0qctMhgMxnQFuWCoqiwXLs7FYDAYxwXeVgpF8p6+ei3BhM5gMBhlUJ1Cn5oLixgMBmPK4/nOYVz55QcwlM4XY9UsIsoFrNAZDAbjuGDb4WHs7h5F13CmGPMlb5L4uUk0g8FgHB9Q9gpF1FWpdiZ0BoPBmHhQnnfGO7/cNzeds1wYDAZjwkFPgNa2bgsrdAaDwagxnu0Ywru+/4RFsLSVQlku4ydv9tAZDAajxti0vx8P7erFYDpXjFH2Ck3e41v6H4QShVCO53S9wYTOYDBOOBwLeyWerz7RdgvAhM5gME5A+GavkJkv4yR5JnQGg8GYAPinI/qStz2OslcmOsMFYEJnMBjTHL/dchhXfOl+hAbBeqtxX3vFQ41P9IQowITOYDCmOXZ0jmBvT9JSzL5WyngXFh2POi4AEzqDwZjmIEnZk7x91HghCBE49sqxL50LeBC6EOIHQohuIcTWMu+/QwixRQjxrBDiUSHE2bU/TQaDwRgf/Jf0e9ZoiRFzNS3pag0fhX4jgKvGeH8fgMuklGcC+CyAG2pwXgwGg3HU6BzK4LE9fVYs7UnedNEtOyaldGLVtKSrNSoSupTyQQD9Y7z/qJRyQL98HMCKGp0bg8FgHBV+8Mg+fOAnT1kxSmVTJO9DzFRJ3MlSmAuovYf+XgC/K/emEOI6IcQmIcSmnp6eGh+awWCc6BjJ5JGPESdd2tbTQ4+rce9Wc1M8y0UI8VIoQv8/5cZIKW+QUm6UUm5sa2ur1aEZDAYDgH/qIZ3lYsfCUDqK3DtX/Tg0iAZqROhCiLMAfA/A1VLKvkrjGQwGo1rkg9Ah2HTOz17xyXKhl/P7lgyYpFkulSCEWAXglwDeJaXcWf0pMRgMRmV86a6duOaGx60YPQFaOaYmO4MxxwBH0zT6+Hjo9ZUGCCFuBnA5gIVCiA4AnwbQAABSym8D+BSABQC+KYQAgIKUcuNEnTCDwWAAwMGBFHpGslbMdwI0brnkA4l4IUSfrBc1jrBXPCdPa42KhC6lvLbC++8D8L6anRGDwWB4IEPYK769PeMkX9VCI9KGmcIeOoPBYEwkcoXQUcKU8vaxXMJQOuTqu5qUTm08Og9dGRkTAyZ0BoMx6fGp32zF+39s55f7Eno8diwmO8vloQsBNCQmjnYrWi4MBoNxvHFwIIXBVN6KURkt9MrOypOdVZXTPQqSb6pPOF59LcEKncFgTHrQ5E3EYuNyQegQKGmlUBOgvpOinn55thCisW5iKZcJncFgTCpsOzyMHZ0jVizlmV/uTHZSE6Lek6meTaOPYqVoU0OdE68lmNAZDMakwj/f9hy+8LvtVoxMR4wRcz4InS5B1TSy8CbqMv57fcKe/cwWAlboDAbjxMJwJo9CYBOzTy65tzfum6JYla8eoLHeptdcIURTAxM6g8E4gUBaKTE1HhB1VsabxgiUIXlfNV7OXokROnvoDAZjWuO6mzbhy3ftsGI+2Su+C4joSczxT3YeXUaL7ZfnjoGHzmmLDAbjuOG5w8NoiCnZOKEXgnDcatw7O8aTvH0fJLlC4Ngr2UKAJlboDAZjusKHmH2JmiRvQj2Pt4AXcHT2SjzGHjqDwZg2+Nxvt+Gu5zqtWCpXsF7nCm6mSlUEXFX7Of8JUIfQ86EzKcoeOoPBmDb47ycP4sFdpU5lYej25yTJO1e5uNbRxKqzXPzyyxXJUx46EzqDwZjikFIiNc4Kh9V541R+eY2X/uf9LBdqorTWYEJnMBg1x389vh+7u0eLr3NBiCBmpVCrP8e7IrRszCNjBjg6Nd5Q5y4YIv1yIsaWC4PBmFIIQ4lP/norbnv6UDHmO4lJxeI+O3D81Hgm71oplPKmY27mS63BhM5gMGqKSCmbetxfefuRt7car8aaKaPQm2OknMnTKYrUStHjrtCFED8QQnQLIbaWeV8IIb4uhNgthNgihHhR7U+TwWBMVmw+MGCpaG/yJhU6VUzLM0auAPXLXjk6v5xS454e+iRQ6DcCuGqM918FYJ3+7zoA36r+tBgMxlTASCaPN3/7Mfxq89HbK7X2y6kURV8PvVyp3HiBrQyVokjZK3mbvINQohBKNNYd50lRKeWDAPrHGHI1gJukwuMA5gohltbqBBkMxuTFSKaAIJQWcaYI24Qmb2qcG/NNPawmRbFcrDmejpgnUhTzxKRoYJN8VB99Mij0SlgO4KDxukPHHAghrhNCbBJCbOrp6aGGMBiMKQTfTBWSqAnbhC6TS23rSeiejSvKNalw1XgZhW6QfEFn9JjjIvvmuHvotYSU8gYp5UYp5ca2trZjeWgGg1ElhtJ5nP/5P+Cp/aUf7LXOXiGVvK9f7tvMwteGKaPQzUlRKaXjl0cpkOak6FRS6IcArDRer9AxBoMxjdA5lEHncAbtvaliLOlLylXYJlX56mRZXDrm+uXuJGbcL4+KhpkkHxG6Oa5I8lNAod8G4M91tsv5AIaklEdqsF8GgzGJQJF3NcqbinmnGXpuezTVFl01buecRzXYKTVuk3egY8S4492CTghxM4DHAJwqhOgQQrxXCPF+IcT79ZA7AOwFsBvAdwH89YSdLYPBOCbIByG+cvdOJLMlcvbOVPGNEcTqvT/fSVFycRCd0eLkl8dyziPbxCT+qHRuUwV75Vh56BXroUspr63wvgTwwZqdEYPBOO7Y0jGEr/1hF85eOQdXnLYYACxyj1CNGq+GqL0tHN+G0IUArU1Nxdf5MSY26Zhrr0zVLBcGgzHNEBG1NJZ71trf9iV5/4eB32rPdN5u1iyldBR6llDj0b6aKL/cjOXdSdESyTOhMxiMCUbnUMZ6ncz6ESs9jvLa/fLLJyKXPI74oh+avNV2zYQ3bsUIy4VS8jkmdAaDcSzw9MFBnP+FP2BPT6k6IkXKlOVCEfVkslzisWhicwbhg1veOOmDl/fGactl7MnTiQATOoNxguPwYBoAMJjKF2PJGtsh8VroQHU2TDkrxYSU0llEVFTZphovxkp0SCn0KNZUT9gwpBp3PfR4wa5agwmdwTjB4au8KZKniNrfG/ctizu+Yl/5QCIIpaXGM3k3b3ws8qZ9dUKh+8aY0BkMRq2wo3MEV1//iEXivt647xL8alIZx5uvHobSaVIxpvL2nuyk/PKxM1qoRUSs0BkMRs3xzMFBPHNwEF3DpUlQerWnn0In1T1VdKuKmuY+HjrZcUjvy1To6bHUOBlzHwa0N+5muVRaPToRYEJnME4gjFK55IQa9/XQ/X1wv8lTH3slH4QoxNrZRWPM9nAZYrKzSMqEaifVODFRai8s8stNZ4XOYDCqwvOdw/jfP3/G6uVJK28/K8W7bouvbeLxMAhCWSTD4v7HIP1mSo0T9orlq4/ljVdcWFSe+CttOxFgQmcwpike3NmDW5/qwFC6lL0ySuWNUwqdXBVaheftQd5SSoesveu45F17hZzYJEieitHqvrzX7lOcSwg4BcBqDSZ0BmOagiRvT4XuW9N8vEv/afL2K5MbxUxujH4VzGisoNCpidKIlCsW2Cq/2IiaFG2oL51gVFtdCCZ0BoNRAQ/v6sWHfvonSGOtfopQ2d4rQKtaMGRvS5F3thBaZQWAo58kbWkslaIaa2LTmhTNjbEq1PLVPRcbkcv8VYNoAWFtO9GFuQAmdAZjWuDh3b347Ra7ajVFypSVQueh+1kz8XFSSiejJZN3ybuqfqK5MQi4sZJt4mu5lI/F1bgi7xJUI+mxuxpNFJjQGYwphjCU1kQnQJMyZbn4Km+fVEYppROjlLdvn9Cx8txNp2KsCdAZlXLOi7YJpcYrpCNqlW2eC9WSLt5PtNy4iQATOoMxxXDDQ3vxmq8/ZMXISUzPiU2SvCk1Ttgm4XiVt2eP0aK9QihlMr/c10pprKzG6xPCmsQsq7zj5E2My2klP9FgQmcwphj2dI8W669EoPLLqRhN/JVJPlcIkQ9s9vZvBu2bHVNeyVuTnZr4ZxCkTJE8mflSb6v2uoRAfcIm/ngHo0whcOqZZ/JU02h3HEX8EwEmdAZjEuPwYBrbjwxbMdIbryYWI/kglE7GiW8tlurqmZfPXqmcX06RN70QSAigIWa5kKQcj+UpK4XuOxqfAJ1UCl0IcZUQYocQYrcQ4u+J91cJIe4TQmwWQmwRQry69qfKYJx4+H937cBHb9lsxShv3D+/3J3EjJM8ZZH49xP1jI1RhMvOSvFT3tG4JmKcSczpfIDm+jprEpPqJ+qr0MuT/CT10IUQdQCuB/AqABsAXCuE2BAb9kkAP5NSngPgGgDfrPWJMhgnIgaSOadOyWgm74yjJ0Urq3HSB6/xoiKqtgu1OChVzCUvpSNSlgtVo4Wc2NR2SCJhlwNweofmQ2uSFNDkTSj0Zo/Jzixhw0R56BMNnyOcB2C3lHKvlDIH4BYAV8fGSACz9b/nADhcu1NkME4MPNnej4d29VgxmpT9VnbGY4UgdB4O5Hbei4r8yJua7Iy2NWuvlMh77EyVNDHZmc6r3O86Ye/PfBBE+6OUdzymuhoR5E1641SWS+VxE4GKTaIBLAdw0HjdAeAlsTH/DOAuIcSHAcwEcCW1IyHEdQCuA4BVq1Yd7bkyGNMaX7tnF0azBVyyrq0Yo+2Vymo8DN18cJqox0/eVY2jiDoXZbTUO7EZDXXFh086H6ChTqC+zib+GY5tEjiKOlMInXHlyDuu5MtlucyZ0eCMWzDT3t+k8tA9cC2AG6WUKwC8GsCPhRDOvqWUN0gpN0opN7a1tTk7YTBOZIxk8oi5HxjNEvYKkQ8eV9rpfOCVD17dsn9fy6V8PZaWRpfQTSJNafK2lHzOVdQqRlgpVFbKuMmbUvKBY9eQNswkynI5BGCl8XqFjpl4L4CfAYCU8jEAzQAW1uIEGYzpiD/u68czBwet2IiHvUKRdybv+uC0BVN5krTctrVoWmERdZnJzrjypsibVOMFN5YmJzsp4qeUPEHelL1CToCWyUOfJEv/nwSwTgixVgjRCDXpeVtszAEALwMAIcTpUITeAwaDQeKzv92Gr/1hlxUjJzYz7iRmPB+c9Nk9m1F4K2/PQl9jEX+cvBvrEqgzJixTOdo2oYg67o2XI34yFifvMkreHRfQGS3kMv/KuekTgYpHkFIWAHwIwO8BbIfKZnlOCPEZIcTr9bC/A/BXQohnANwM4C+kjP/gYzAYEYbSeWf5vkveAXKBxySmb4zMQR+/r043wShACHepfnNDAglzwjJXICcsHaIuQ96+atx9QJQhb0plExOgjjVDLf0n7JVjpdB9JkUhpbwDwB2x2KeMf28DcFFtT43BmB4YzuTRWJewSCOuqoNQOgTpa5H4rhL1V9m+5E0/DGY01Fl1zFO5glUZEdBEHSNRSqFT5J0puDni2bw72ZnJh1jYWh+LEZkvhL1CKfTyy/w9UhmJB8REgFeKMhgTjHd97wn8x507rFhcjftWRvRezu+9ctTvoeG9iCgfWBOd0TiKvOPjlBoniD9OwGUUuo+6zxR8LZcyE6oViFrKUgXGCEEoUQjlpJkUZTAYVeBAfwr9yWzxdSbvWilxggeAESJGKm+CWMlKi+Rq0vH76ul8wSG9dK6MReLpec+g9udL3p5+eXwSk/bGqWwY+5eBlNLJOc+HElLaq1OPVT9RgAmdwZhQSCkdYvYupFVj1e67iIj21WmSj1spqVzByiMHFNlSapxS8j7WTDnypgpnNRPqnkxRjKns+OrRQJcsJvuJmvXRy9RMVzEmdAZjSuHHj7VjS8dg8XUm73aop5Q3qcY9FXo1k6KUQqdWe6ZyAeLtMJPZMj64p+Xio9rTBCl7pzISS/XjfnkYqpWd5rhIUZsKPaqjTnUrstR44HY1YoXOYExR/Osd2/HLP5WWaYwQdVd8idqXvH3LA9C10P0V+kxHPRdc5U1540TMNx2R8svVxKafNWOq8VBK5ANJ9gS1W825Rb2yVOVGT5Kn+o5OFJjQGYwaIVcInbKzw5QaJ1Z/VkfyftURaf/d30NvaSIskqa45UJZKW6KIjkpmgusRhZAebtmRszLjqct5oMQQSjJWujmwyCyQ7z7iVayXAg1zgqdwZiCINU4QaL0ZGcVFRQ9vXa6aTT9gIj7vUnK3y5DwPFMlUw+xIwGl/h9slLidk1E3jMs8pYIJd3wwq6Z7tljlFDo5fqJxsdRapw9dAZjCoL2xn3VuKuyqf1VNSnqa69QqjhXcCyNZM61XNSkKBEjLRf3AWGSchhKJ7Mk6llq+upj9RglW83VUyTvp9Dj5XmBcqqdFTqDMaUxTJC3b+qhv+Xit6Tfd1xKr+y0Yll3IVAyG2Bmk2uRkIq6gr0SNZc2Y4UgRC6wFwdFE5Gk8q53Y+a2Rc871twCsD3vsfZHq3aK5IkJVcKnZ4XOYExi7OtNWgtufBU6bc34WS6+Md/Vnslc4Ex2pnIEeRNWSorYNj4BGhAqOxeEjkUyVhcislsRaa+45F3ZhqHI21XZGXKyc4yYmeUSsOXCYExqFIIQr/n6Q/jJE/uLseG0n0KnqiqSXrvnOP9m0HQsbockiaX6yWwBM2MqO+555woqRbOFIGqqTG4loqYbRPu1pBvbXjF/BbgEPKZCrxTT25p1W0qZL5zlwmBMSgxnCkjlAotMKfKmslx8V4VWk6JYjuTjPm4yF2BmhUyVSGXbald52SRRN7oNKsxxpVZzxv50VyNfhU41xmgmz4WwcCoo9EzBVfxkOuJYqp0VOoMxdTBEqHHaQ6+tr+5vuZSzV8aesMwHIXKF0FLokX1j2itRZo1F1Hk3RpI8odqjbSvZMBnSSon8cld5U5OYFSc2CUWdIfPVPbNc8jwpymBMatCEPv56LNWsCi1nw5grO6PGGCZR53Rt9ZkWeStCMj10SmVTRJ2i1PhYJE+p8QoqO00oeYrko21NYqXUPW3DeCp0wnLJUVkuAVsuDMakBuWX0x56bRcR+ZB8RN4mUecC5W+3NrnK21wwVIyRRE0QfwWiLteZCPCYFB0jHbGSh54lM2QIJU/55aRCp7x2z4nSyFdnhc5gTE5QCt23RotveqOPGg+JOurZgsoiMb3xqBa6Sd7JIimPrbJJeyXnWiQU8VMqmzoG9SsgQ02oEqs9qSyXsTNajHGRGieUN23XjJ2OSK0U5YVFDMYkgpQSNzy4B51DmWLM30OvnRovBG5pAcqPjrYzbZMoZin0LEHU2fLKu4W0YVzFT1kfNnmrceNR3lFz6YrbEr8MioqaylevYMP4L/13rZ5Jt7BICHGVEGKHEGK3EOLvy4x5qxBimxDiOSHET2t7mgzG8UPXcBafv+N53LWtsxjznwCtXA6AavycLQRO79Cx+oSaapyK0co7cLct2jD1zjhq20oqOzWGyqYsnGbKrvHMV7dWhZI1WgiSH6M4l5l6mMkHEMJNRxQCaKgTY8cKIRICqI+Xq5wAVGxBJ4SoA3A9gJcD6ADwpBDiNt12LhqzDsA/ALhISjkghFg0USfMYBxrDKZzAFSd7AikQk9XVtlUffRswS2xO5bPbhKSqbx7RlQTjWRRZbtEbdkrlEIvjnMVdSU1TlsprhqnxpH2ylhqnNiWJPlYpkoiRraZfIiGOmE1q87kVcehRMIm5ab6BIQwY4ETixpexGPNDXZsouCj0M8DsFtKuVdKmQNwC4CrY2P+CsD1UsoBAJBSdtf2NBmM44eBpOcEKLHaM575ksmHTnNo2j/3VeNuVkqRvCuodkqhl1SxewyKbK0HBEG2Y/nqVC75uIg6H6IuIdBQZ3vjcVLO6DrqJrHSXY0Cy1MHyvQT9ewxChybDBfAj9CXAzhovO7QMRPrAawXQjwihHhcCHEVtSMhxHVCiE1CiE09PT3jO2MG4xhjSCt0O1ZZoWcLQdE/jeBdkVE/HGg1TvjlBmFSHnqSmBSl1DjloafGsEgoNd5SIed8rMVGzbE0Q0XUNgE3xYia7GBE1lF3m0tTLelUn9A4UdP9RJ3uR0SDaODY+OdA7SZF6wGsA3A5gGsBfFcIMTc+SEp5g5Ryo5RyY1tbW40OzWBMLAZTlclbWSn2OO9l/2OsJqVUdmszESMyWkiFTinvCh76WNYMpcbjiloIezIxlQ9QH1fUuhmFRdS5EC2EoqbK7lJE7TR5LlDK221JF52LPc59GGSJXqShpMn7WGS4AH6EfgjASuP1Ch0z0QHgNillXkq5D8BOKIJnMKYUpJT4+aaD1iTlIKHG4wo9mQsQc1K828pFatwkkYhYZxHkTXrjFPETOeczqViF/HKKqFO5wLE50jmlTk0/OqVrppukXLZKo1NbveC2nyvXDDreXLrsOM8Y1TSatGH8yHsyKfQnAawTQqwVQjQCuAbAbbExv4ZS5xBCLISyYPbW7jQZjGODXd2j+PitW3Dv86VpIEqhxwndN8NlLJJvbWpwxpm2yUjGJepRwhsfJRR1kiBqalwqV3DUc0rXQk+IGFE31lmld+luRXTvULppNFEf3SH5kCRqP/IuY7lQRO2odjdWCKUTA2i/fNJ46FLKAoAPAfg9gO0AfialfE4I8RkhxOv1sN8D6BNCbANwH4CPSyn7JuqkGYyJQu+oyhQJjZQWykOPpy1SGS5jdSYyFVtErLYaVwTcWmlik/DVI+Ud3zYh3GyTuM2RzCoCjhM1VQudIm+XlN32c5R6jvf/LDuOaiRNPDQyhA9OHaMs8RMKPR4DypA3SfLHRqFXTFsEACnlHQDuiMU+ZfxbAvhb/R+DMWVBqfF4lksYSifL5WgV+ixCUdvKO+/EIpVteuhRI4sZjXassS5hqexkVtUuN4k6Xh4AoJtBk00rKEWdp8m7hWw/N3a3IrVt6FgulIdOKu9cgBlxHzzvVpbMFAIsamiyxxUCh5TzQTk1PvUsFwbjhEF/0lXjgzGFPporOH45tdAoSlk015MUbRODlGkrxc0sGc0W0FAnrMUtUZ3yRIyo3YbOVMxt/Jwkm0EXXFLOui3pvC2XfMEhW9WfNEa25XqWkso7rtD9LRdHjRMxoJyVQpG337iJABM6g2FggCL0VNxeObo6LrOaS944rcYLaKxL2DZMxiXq0UzBUZjJLBEjVPYoocYphZ4u08GIfBj4TGxSfjlhzaTyAT0BSmxLTWJSDwjHVycyWrLEw0AtBHJJOb4t4E/yTOgMxgSjcyiDy754H/b3JYuxAY8JUDoHvbzlEifv5oYE6uMqO66UswVLxRfHEUTdSpB8PJbyaGQRbVupJyigLZcm92HgQ/IpipQJNR5NxlrjyqQt0uRdOXslQ0yAAuVIefx++aSZFGUwpiu2HxnG/r4U2vtSxdhAqrJCH6sWelNMZbc01qHeWBgzkslb2SzRuDh5jxLKuxx5O7ZJlrBSyrSao0jebYJBT3ZSBBwfR3vedJaLjzeeJtQ4NbGZzpWxV2LHyBH55QCcCVXAX3lT5M0eOoMxwegj7JW4h57JB8XVjhGojJbhTB6N9QnrBh/JuAQ8kilgdoy8R7IFl+SzBWviFFAE7Kp21yJJ5gjip8g7Syj0XMFR3vGuRipGWyle6r5MjCTvxoQTo7JcqEU/VNYM5Y2TMUJ5k8Q/ybJcmNAZJyz6k1knFlfo/o0sCpjdbJPySDZvpSICWmXHYxmXvMuNo/xySrU7PnjWtVworz2V9VPo5TNfKqt2emVnmQcElaJIKG8fGyZHLNUHau+Nm5PWxRgTOoMxsegbdRV6nNB9PHVAkbyjvDMFa0K0FKtM3uX9ctdKcSdKXctlVGfDmKAnO10CThF2TTnV7rMs3/HapeuXS0it0EvnEkp3CX4QSjWJaRBwIZQohLLMxKZvzNNeocaxQmcwJhZ7e0bx8i8/gL7RkiqnLJd4zvkg4akPpfOIV0IdyRQwa4ZN3sMUeRM2DOWNjxC+OmWvjJZR3j6Tou5DQzp2iJRKeZsPg1BKZPJ2I+lQStVc2kg9zAcS+UDaTagLimxN8s4FqsMS1S7OaitHlc4ttppzG0/4qnFvhU4Rv2d6Iyt0BqOG2HxgELu6R3FoMF2Mxf3yXCF0Kh9SdVyGM3nHIhnOUAo979owxKQoSd5lrBRKyVdS7VJKba/YyjZbsEk5p8nW3DZTCCClvXCJql3uXeP8KOuZmxOgvp2JIlAxXx+8KoXOWS4MxsSid9T1y/tiMVKNl7Fc5rS4pOySt6vQR7KU5WI/IKSUjpKXUmI0RvJBqGwJk4CzhRD5QNoNKvKKlK0KisVa6CYpU7VdqHrrYzSjGEffUaozUYYgfroZtNsuLgKpqD3tFV9rxn+xESt0BqNmIAk9ptD7qZTFMrXQ58TtlbQ7ATqSsWNSSpW90mzaEqpPaGuMlONKOZVTpEy1i2sliXrsGFWlkVLZUenceKVFwFbtxW09OxOZFgnZd5Roykw9NCJQZOur0GmiHv8yf15YxGDUEEEosfXQkBXrJSZA45YLueyfrIVOWSkFzDZIPiJqc1I0qUmZKrhl12cZo3SuZ7Euuha6SdSUbUK0msu7D4OokQVVYpdS7fbDIHpAGPujyJtoqhGp8WrslXg9dKCc5eKZmz7Vqi0yGFMNtz97BK/7xsPoHskUY3GFns4FRRKKQJH3YDpv1fcGXIWeD0Kk84Flm5SW/RtEPUYpAKv8bVQ6l+hCNKsCeVMdjJJEXRiqxyjVzi6Vda0PunnzGA0vKtgrY3Uw8iXveHZNuXH+lgsRq2L1KFsuDMY4cbA/BSmBTK7U/i1qoByhj8hBpxV6DnNj9spQumARekTes62YejjY5K1LAVBqnKq+SJTTtck7KrHrKmCqx6j9y6B8SzrK3zaJPz2GD16p/dyYE6Vm5kukxhtdiqJi/hktVXjjNbZmJgJM6Ixph+7hjBOLWy4UeZcrzBWfAB3O5C3yjhYazSIqKJqxYap0LlF9kSrgFXU1svuEUkreraNeJGqyn+jYHnqkvO1mGW6M9MHLdDqKx6im0RFqH/Ml+Srqu3DaIoNRO3TH1HgYSmdVKL2oiLBcUnlLoWfyqvEzqdCb3RhtuZhETTejcGMuUVN2TbRtC0HyFe0VQmUnSa99jAwUq7m0a8NQ43JB6Bwjgrfl4kno9LhqfHU/e4UVOoPhgfue78Yrv/Ig8kHJXokT+kAq59QvJxcVlVlENLel0XoN2PbKcIZS6DrWRJTOrUDyYxF1pd6hdNNo14ah7JUkOY6wUggbZqxJ0UqxCJQPHl+1Wm4cFfNW49XkoU/FBhdCiKuEEDuEELuFEH8/xrg3CSGkEGJj7U6RwSiPP7b3Y0fXiFVAK+6X0xkutIceXzA0mMphbotrr8wh/PLZhGqnSJ5S2a0E8VMkX2lSlCLlMZtLV/DBabtmjInNBpf4zVhBP1mrUd6kyiZImRpHKepq8st9LZdJk+UihKgDcD2AVwHYAOBaIcQGYtwsAB8F8EStT5LBKIeuIdsvl1Ja2S1AuUVF9ATovJklNZ4rhEjmAsydQSh00xtPlydv2lc3yJvy0DN+Cp3yy4vNoIlYS8XslfILi8z8cmqyk1xERNgrEbxVNjkB6qvQx++r+xP/1Kvlch6A3VLKvVLKHIBbAFxNjPssgH8H4M5IMRgThK4YeY9kC8U6IBF8FhUBamHRPEONR+Q9l4jNISwXWqGP3a1oJFuAEDZhJonYaBRrtMepxs92s4y6hLAIJJVTretMlZjMuV2Skjm3F2lKj4s35GioE7FxAeoTwtqflHBiAFCXEE5FwoRwqxRSMSH8bQ5fe8XbL/c8xmTPclkO4KDxukPHihBCvAjASinl7WPtSAhxnRBikxBiU09Pz1GfLOPExt3bunDdTZusWGdMoXcPu+Qdt2CAclkueUuhR6UAKhO6ItvWRpuom+ptwhzRDS/MvPbRTAGtjfVIGLGRrBuLWsgJoypYVOPciumqimZsNEuXvx1v31GqhG224JawBcpbJiJW3awl9reVG0fFmhsSTqyxLuGsH0gIoKEuVlUNZYi6irRFyi+fVB76WBBCJAB8GcDfVRorpbxBSrlRSrmxra2t2kMzTjDct6Mb92zvsmJxAqfIm/LQ+0azlh8dFeaab0yADlLkTUyKqoJbMVLO5J3SuaNk6dw8XTrXo60cFaOqL6aI0rlla6ZTxB/vTJR3jwH4T3T62iNH84Bw90fkrxMPg8b6hPW5AepXAEX85MKiKbhS9BCAlcbrFToWYRaAMwDcL4RoB3A+gNt4YpRRaxwxKiUCipSitL8Icf8cKG+5zG+l1LgZyzuxobSbojicdgtzDROdiegWci450vXRA6LvKN1Qgmxk4dFPlGxaQXQwCkLpnZHinYpILiCqJhXRM1ZGnceJvy4hLNspAtXMYrJnuTwJYJ0QYq0QohHANQBui96UUg5JKRdKKddIKdcAeBzA66WUm+jdMRjjw5GYvdJJLCCiFTptucw37JWoMNf8mSVijkg+7qvPbKyzFFy8CJeKuWp8mFDtI2VqoccJmBpHPSCoXqSq4YVL8lQsruRV3XOKvH2J2o/kzUyYsfc3fnVf6+YW9WVIflJ76FLKAoAPAfg9gO0AfialfE4I8RkhxOsn+gQZJya+//A+vPN7dsJUnNC7CEKP56ADitBNwRXVcVlgErr21E0PvTgpamS5xFeJFmNE3XPHcqFK5xIPgyTVT7SMDUM3rYgp+ZxbM9231RzgT8DexE9ms9R2ARHtgY8/ZdF38rOckj9WhO5+KgSklHcAuCMW+1SZsZdXf1qMEx2P7enD9iPDxdepXAFD6TxMu5MidFKhj+Qwv6WxmNkS1XFZMLOpOCayV+bHLJe6hLCsDqp07kimgKVzmp3YktmVY6PZAhYTsbZZTVYsmS1g/swWZ9zKWCyVC7Cg1d02TtRJotVcEErH1gHKWCnEuGo877hPD/jbK96LirybQfs2t3D3R1kwCQGS5CcCvFKUMSlxKOaXHx50ybtzyCXvuIcupURfMouFBslFatz00KOY6ZcP6MJcpp86lKYVuts7lGgQ7dmSLpkNnK5Go5RqJ7oaUTYMpcZVDfbx++DVqPFqJk8ple297L8KG8Z7lajnJOlEgQmdcdzRPZLBvt6kFTs0kLJeHxmyCR4oY7nEsl6G0nnkA4mFs0pEHSl103IZKFouhodOdCYqWwudJG+XlJ32c8QEqMqasUmgnDfuTpS6zZupSVEAjocOHAVRk5aL3/58lbevT19NwS06L722+ebHakIUYEJnTAJ85n+24SM3by6+Hsnki5UJI8T9c6C8h26q0WhC1FTo0SrRBa2mGleph+ZP5qFYYS5AEbppuUgZTYCWYqGUSOYCu12cdLNXJAjlHW3rkcpIknzsuOp8QBJ6XLUD5Uh5/CmKVfnq1UyKVuGr+5fJ9fPfj5V/DjChMyYB9vQki0vHAdduAYAjlOUSI/RsIcBQOo9FhifdM6LI27ZcFMnPNzz0gVjNFkC1nzMtGMD10NP5AEEoMXvG2AW3ogJZppJP5wqqg5ERy+RD7WXbOfL5QFqqvRBK5AqhtZgpGuubI04RNe2he8Y87Quy4Fata7sci5otnl47K3TGtMVNj7XjBw/vK76WUuJgv22vHBogCJ2wXMotKjInFEmFnsyhsS5hEWQ8jRHQpXMNki+ESj1TC41MhT5MldOllv1nxijMRRbwcgtp+ZJ3XLWrbX1Jfvyq3dtyqarj0Pj9d2/i954oPX4ZLgATOuMY46dPHMDtzx4pvh5I5YuEFYFS6IdjlksYSnQNZyz10z0moRse+mhE3qXJzsFUDvPiajyVt1MWi6tEXVK2a6GXL8xFNrIYR+ncCBRRU7GqrBRff7vGx6imqJdv6mFVHYyoRhbU4iOeFGVMB3zi1mfwlbt3Fl9LKdHeZ09+Hoipc4BW6J0xhd6fyqEQSisNMFLsi2KEXpcQlnXSn8xZ/nm0P1Oh5wOJkWzBuzBXxaqKWVfJl2qX1xGx0v6iWu60yvaNuaTia69Q47yzV6pKPRy/avdX/L6FvnzTG9lDZ0wD9CdzxfrXEe7a1oXnDg8VX3ePZJ1KiHG7BQA6PDz0qCjXEssvV7FFs0qx3pEcFsxstPLX+wh7ZSCZJ8m7Ui30or1i1nbJuiRfLJNboRZ6VC88PikKVEfU8RotgL+94rvas5oUxapWo1bRtMK/uYWnaj+ODaIBJnRGjfDW7zyGL921o/h6IJkrLtaJ0B5LTQT8FPpIJo+RbMG6MaIMl0WzS2q8ZySLhLCzV3pH7Rx0QBXmMlMW80RhriG97L9imVzPfqJULB9o8va1UgiSJ1W750IgmuSpcbXNXqmqXZznIiKykbSvDVPFBOjxXPYPMKEzxoE7nj1ikXMyW8Du7tFidUIA2Nfnkvf+Ppe8KYUe99CjlEVzNWaXtlcsy2Uki/kzm1BnLATqHc1iYWzVpbJc7AwXwF72P5imCnONodCJphWmvRIp7/jConIxX5L3tlw8Sd635VvN/feaV1v0jXk2t/AmebZcGFMI2UKAD9+8GT/944FiLL4oCAD29bixuH8OuAo9kw+c5fsUoXcOZyCEPQHaPZK1/HNAlc41J0SjOi6m5VIkdKrS4oyj99DHIm9vNe5J1DUneVKh+5K3n63ja7lUtfTfe5l/NQqdmBT1THmcKDChM8qiEIR4x/cexwM7S81I9vUmEYQSodF1eU/PqLMtRfKkQndWhCryNm/cqGzusjkzirGuoQwWtjZZTQy6RzKWBSMh0TOaRRux7N8uzKVIOb5KFLBJfpgonZsrhGisTzjE0FjnxoSgyZEkauph4LltdROgE++XV5VzTlgpZEYLmbboF6tq6T9bLozJgqf2DyBjNFve35/CI7v7sPVQaWJzd7dL3nsINU5ZLnGFng9Cp0ZL5J8vn1ci78NDSo2bC4a6RjJOoauemEIfyRSQK4RODjoAS6EPptxY0UOPTZQqorZvm/iyf6CMOo91IQLgdDUCVDEnisx8ido3bdF39Wg1lovvgqaqVDup0D1rvnjmkvuTvJ9qnygwoTMAAB0DKbzpW4/i9i2lHPFdXSPOuF1dFKETCj1G8lJKR6EfGcwgMJR+dB4AsHzuDGNcGm2tTVYN8s6hjFWlMAwlekdzZA76AqII1wJCtc+LdStKCHuBTzofYHasWBcAp7YLUIbQPYk/3lYOUHZBvGJfvE8ooH4FkA+DKhQ1+auiGjVe42YW1aRB+vcd9SwRwAuLGMcag6kc3vLtRy0i3nZYlapNGwp9R6dL1LsJ8t5LkHfcculL5pwFRJF/biroQ4NpJITrly81CB5QWS6LZ9ukHITSTlkcdZf990UkT3joZoriQDKHOTMaHEU9Z4anGq/x5Ke3V0705myqdx8G8UbSEXzVc1UTpb5L/2ucNeNfFnf8k5289J8xoSgEIX626SAKQSn/+4/7+vFk+wCeP1JS4M93ump8J6HQd8cUehhK7Ou1Y13DWevBAAD7td1ick3kn6+cXyLrQwNpLJndjHpDjR8eTGOZQfDZQoCBVN7JcAHcRUWAu+wfsEvnRoW5zJt2OFNw6rgAcErnlovNanJjVaUiek5q+lswdLPleGPloyF+b6/9GPUPdcf5+uXjfxjwpCijphiIdbO/b0cPPnHrFjy1f6AY22Y0jojwfKcbixN6IQixN0beh4fSzmIhakK0vVeRtzmxeaA/hYY6YRFzx2Da8s+llDgylMFSY7toRejiOeaiIk3os101bpbO7dd1XEwrZSCZsyZEI8QbWZSLeaciEtZMrcnbNz3RO3+9TGPlOPELQRNcrdMRq1Hj3nno1SwsmgoeuhDiKiHEDiHEbiHE3xPv/60QYpsQYosQ4g9CiNW1P1VGJTy8qxcv/tzdVh73sx2DAGB51ZG9YsJU64BSwXFiPtCfKi6GiUBOiOrtzF6c+/uSSAh7svNAfwor5rVYtsahgbTlnw+nC0jlglgOuppIXUwo9LZW23IRwu5CFBXhMklqgKjjEj//CBSh0x66p69OEKuvhVPr9ERSTftWX6SIv861eqolfrJVnbdfXtvl+5X88rqEwIyGOmdV8l9ffjIuPHmBs20tUJHQhRB1AK4H8CoAGwBcK4TYEBu2GcBGKeVZAG4F8B+1PlGGjaf29+M1X3/Iykp5ZE8vQlnK2gCArQR5xxV6Ohc4WSn7epPFfOoIu6gMFx0zb4x9vaNoqk9giaGq2/tSWD5vhlW86GB/Civnl1qoFYIQncMZi/SPDKuH09K5tqcOxBcVuStHe0ezmN/SaJFK76i77D+UIAmdtFw8iZqM+XrjBAH7++p+qYj+xO83jvTFyyjxWhN/NUW3/Im/NK5Bn6t5HebPbMS5a+bh7BVzi7HG+gTu/NgleMvGFda+Pnblely6vs05Ri3go9DPA7BbSrlXSpkDcAuAq80BUsr7pJRRCsPjAFaAUTOEoXSslDue7cRzh4eLGRoAsEWrcRPPGimHgKog2BFbWr+zawTS5m7sJLJZopRF8+f23t5RzJnRYKngfb1JrFkw06qfsr9PxUwc7E9hpUHeXSNZBKHE8rklko9quJiWC1nHZTiLWc311o3XM+Iu+x9IuYW5ADgkD/hbLhTJU6mM3h66rxr3JFvvdEJPNV5NLRY6FZEm7jjx1ydEkUyt7T07DPlmtJjjVs5vweLZTVizsPSdXLeoFde//UW47NQ2a5ufv/9CnLlijrWv1QtmTjoPfTmAg8brDh0rh/cC+B31hhDiOiHEJiHEpp6eHmoIg8B/PbEfl/7HfcgbE5ubDwxYY8JQYkuHTd5dwxln1aW3f945gtj9hN3do1g6p9m6gfZ0J3Fy20zr5tvbm8TahTZ5t/elsHpB6aYYzuQxkMpjlaHQ6Rx0vahorm2vNNUnrDK2PaNlVonOsok6CKWV4RIh3tyiXMzfQ/ezYeIt6VSMehjUVnnX/GFQRanbahpeUOoeKEfypVhLYx3qEsL67C4+ZSE+csUpWL94VjG2cn4LnvjHK7FiXul7KoTAa85aSj5cjjdqekZCiHcC2Ajgi9T7UsobpJQbpZQb29om5ifHVMdQOm8t5AGA+3f0YCRbQEH719lC4Fgp7X3JYgGoCPH9ADShb4/55wCwo2vEIlsA2NU9glMWtVqxPT2jOKmtFCsEIQ72p7C2rUTog6kchtJ5S6FHNVwsQh+kctAzSAhYqz07hzJYMqfZeoh0D2etHHRAdSaKK3TA7lRUjFGWC5nR4pIPmeVyTFIZx0/yVD/Rqsi2mmqJvh64Z9OKhjphkfzSOc1YNKvJOvZrzlqK33zwIqt+z5yWBvztK051JnynEnwI/RCAlcbrFTpmQQhxJYB/AvB6KaXbjp3hhS/dtQNv/+7jxddhKLGpvd8as/3ICHIFO7PkGQ+7BSgzIdo5bJEooBYVmUolDCX2dCctQh/J5NE9ksXJBqEfGkwjH0isNci7XS8oWk0Q+kpKoZuErhcQmTdo57C9qAjQy/5n2bFQgiR0ynKZR6p2PxvGV437eujVTYB6rjCtcVVFf/J2z9m/d2hlT/3MFXNwWcyffuM5y/HYP7zM+g411dfhjOW2PTId4EPoTwJYJ4RYK4RoBHANgNvMAUKIcwB8B4rMu2t/mtMTj+7pxY8fa7diD+/uRcYg613do07D5LjdAgDPHHTJm1Lozx0esnK6pZR4vnMEpy8tkXc6F2B/fwqnGoR+aDCNdD7AukWlWLSg6CRDje/VGS6mQo9y0NcYlsvBfkXeFqEPprFgZqN1Mx8ZSlsZLgDQTRD6QCrvWC5AGUInyJv00AnLhcxD950UrSLnvJoiXN7diny3pdS9J3nPIEh5vA+Ii09ZiNefvcyKXf3C5fjeu8+1YkKIKa26jwYVCV1KWQDwIQC/B7AdwM+klM8JIT4jhHi9HvZFAK0Afi6EeFoIcVuZ3Z2wiBe0AoCv3r0L37hvd/F113DGWXX5ZEydA8DmA4NOjJoQ3XrIVt7ZQoDd3aPYsKykTLqGsxhM5XHaktnF2O7uUUgJrFtcUt7RClFToUc56aZCj5b8mx56e28KQtjkfaA/hTkzGizF2zFg56ADSqGbq0QllEJfMtsl6kVEbKHnBCjll1OZL1WlKPraMFWRPJVzPn7V7tsMmmyCUUWD6Lhqf/mGxXjDOfbU3RvOWY5PvjaecHdiw726BKSUdwC4Ixb7lPHvK2t8XtMO//jLZ9E5nMGP3nMeAGVX/OnAgPXz/7E9fc52cbsFADYftBV6Pgjx3OFhrJw/o6h8e0ay6BzO4JUvWFzMS9/VNYpCKLFh2Wzcs70LALBdT4ieZij0HXpB0alLSrFoheg6g9D3dCdRlxCWD97el8Ss5npLBe/vS2Lp7GbrJj3Qn3I8+kODaetXgYRaJfqy0xaVYhLI5ENHoQNwPHQATi10gLZcSJL3zXIhywGM34bxbytXW4VOkvJR5KH7jPOZKL3itEVOyuLbzl3lbMdwMfmmaacB7tzaiXu2dRVfZwsBfrvlcDHdDgAe3dPn5Hk/uqfX2deT7TZ594xkcbA/bSnlHZ0jyBZCKwc2slvOMNR45J9vWFpS49GCotMM8t7VNYLG+gRWzy+p7N3do1jY2mh5zXt6RrF6fou1Em6fznAxJyzb+5KWfw4oD90k9Ii87UVFeWQLoVPHBQBJ6HEPHbAnUyMs8J0UpbJciFg1i4h8l/7T/rvnCtBqFDpR49w355xcBBQj/o2r52Pj6nlW7IMvPQXvu+QkZ1tGZTChV4nu4Yy1kCcIJT7562fx3Yf2FmNP7O1HMtZv88GdbtrmY3tthX5oMI1Dg2kr3/rpg4MAgHNWzi3GonRFk9CfPTQEIYAXLC+R97Yjw2hprLNyap/vHMayOc2WN7yjawQnt7VavuOu7hHLWgGUh34SEYunLO7vS1nHDKVEx0AaK4waLv3JHDL50LJcogfesjkuUS8hYr4e+nxCoccnQIVwiToh3JrkQtBk6+uhHwu/3Fu1+z4MxmnNrFk4E+sX29+Xf3/zWfhfl53sbMsYH5jQq0AYSrz524/hc7dvL8b+uK+/WOUvQmRvRJBSWk0jAKVYD/anrZs5slvOXTu/GNt8YAD1CWHN0G/pGMTclgbLo956aAhrF860cou3HR7G6UtnI2Go5x2dIzjNUOyAykE/1bjxpJTY1T1qeeqBlNjXp3LQI2QLIQ4PpS1CH84U0JfMWQq9eziLXBBaCj3qEBTPtgFAKvR4LXSAVuhxe6WhTjgE3NpU79TbmN3c4EykzWp2qy9SNc6jJd9xeK8eJYnfN0XRr76Lb5aLfy65HVsyuxmrYw/2X3zgQlx3KZP3RIIJ3RNhKPGmbz2K7xnK+8n2fhzoTxV7SAKq36YJKSX+sN1O/NnXm0THQNqq7x2p8/MM8t7UPoDWpnrLDtl8YBCnL51tpXA9fXAQZ62Yay0E2npoyLJbQqkUumm35IMQu7tHrf2PZgs4PJTBeiPWM5LFSKaAU8z0xIE0coXQUu0H+pKQ0p4QPaBTFs0MlyN6sVDcQwfgTIoCcLJcANcvb4wtNAKUZRJf/BGv4wKALMzlu6ioXA56/Bjlmlb4knc1ZXbpVaHjX+Zvjmuur8OCmY3Or7f7P/5SvOM89r2PNZjQCYShxEdu3oz7ni8R8eN7+/DU/gGrY8+vNtvp+EEo8butnVZs+5GRYo3vCJHdsnF1ibwf39OHBTMbLRX8ZHs/zlk1t6gUAynxTMcgzlk1tzgmnQ+wq3sUZxtLjvuTORweyuBMQ8UfHEhhNFvAhmUlQt/ToyZJTYUeVVhcb6QnRjVc1hkTllEtdSpl8aSFpb8hqrtiKvRo6oAi9BVz7Vh9Qji2ybyWBicLoq21ySFROmVx/IuKqqq0SDStKEfyvqV3q7FcxtPwYuGsRpy9Yg7OMr5rjfUJbPrklbjqjCXWdo31CeeXC2PiccITej4I8Q+/fNbK2b5/Zzdue+YwnthXyjC5+cmD1naZfIDbY2p8U3s/ekezllK+Z3sXhABetKo08fPgrl6sWdBSXAovpcSje/pw/skLIKA2HkrnsaNrBOeuKZH+zq4RpHKBRejPHR5GEEqcZU2IqslP05aJJkRfYBB6tEL0dEON76QyXLrdlMWo+5CpzKKVqqZfHsFc9g8oMlsWs1Jam+odlb14drNjfZATop4pi1SGC7WAiK6FTqwSJTNXfJf90yRPLaAhvXbPIl6ViD8id/PanLZkNv7qkrW4wKgK2NJYj9986GJnQY4Qwvk7GMcHJxShp3IFfOLWZ6yysP/zzGHc/McDeHh3KcPkh4+0W9v1J3P4fUx53/d8N0YyBYu873j2CJrqE5bV8YftXTh7xdyiWswWAjy2p8+qttbel0LncAYXnFS6ef60fwBSAhvXlB4ET+v883NWlmJb9CSpqdCjh1N8QrQuIazVn893DqOxLmFZJLu7R9HSWGd52d0jqvCVOelYCCXmtTQ4KywXtjY55LVoVpOjHJfOmeHYIcvnznCIwazhEoHOcPGcEPVcVFRdHRffmB/J15dpMlEpeyXajRlbt2gWTlsyy5qQfvHqebjtQxfhBcts5f1Pr9lAPrAYkxfTltC7hzN434+eLC4xB4AbH23HzzZ14I/7lF8dhhLfun+Ptd3u7hE8tMtOH/zlnzqQC0JLKf5q8yEsmtVUVKihtlsuP7Wt+NO1aziDZzqG8PINi4vbPdU+gHQ+wKXrSoQepSuaNZKfbO9HfUJY5L354CDmtTRYaveZjkFVq8IguWcPDWHNghbrZtx+ZBgnt820rIqOgTTWLW61lkRn8iHWLZ7l/Fxet6jVIZq4bwoAJ8UmwgA4VRaBMnYL4Z+bJXiLMc8JUV/LhSyd652D7q/GxxujeozG28rNbm7ArKZ668H5yhcswT+/boOVurlh2Wzc+bFLre+GEML6hceYuphyhJ7MFrC/L2nVMtnSMYiXf/kBHDYaO/z7nTtwz/buYjGqoXQe33lgr7Wve7Z3OTW+b3y0Xfl/+v6RUuK/nzyIs1fOLf6EH0jmcN+Oblz9wmWo0zfaUwcG0D2SxavPXFrc173ag3/Z6aWFMQ/s6kFDnbB+yj62pw+LZzdZSnlT+wDOWD7H8jA3HxjAOavmWTf31kPDlqcJqEU78Z/FqVxgTYhGMFeIRli/yCXqeFEugCb0eMoi4NotgP+EKJWyuNhjkrRcjKzjQuabj78Wum8pAJ+VowkhnG3PXjnH+k4BwNtfsgp3/s2lluhYPLsZf3HRWrZDTiBMOUK/f0cPLvvi/WjX9UHyQYhP3LoFu7pHi2r82Y4h/OJPHdZ23394H4bS+eJrKSW+ef8e66f6UDqPXzx1CFefvayofv50YAC7ukdx7bml+mS3P3sE+UBaS5Fv33IEjfUJvOz0khq/Z1sXVsybYa1+fGBHD168el7R15RSTbheePLC4o0XhBJPdwziXMNuAZSiNvPPATUpSqkrqvCQ+ZM6glnDJYLpn0cwa7hEMCdEI6yhFDoRW0WQPJmySBE6teyftFz87BWyMJenGo+T/IzGOmd1amNdwvkVMLOxzjm/Uxa14szlc63Yey9Zi8++4Qwr9sZzVuCb73ixFWtuqCOvH+PEgtfS/8mMHz6yz2pwLKXEZ3+7DQlRyqboT+bw/Yf24uyVc/GM9pwf39uPpw8O4h9ffRo+f8fzAICfbzqIdD7AX1y0Br955jAA4OY/HsTMxjq87uxl+Mo9OwEAv958COsXtxYVbygl7tzaicvWtxV/MmfyAZ4+OIhrz1tVJOre0Sz6kjl84qpTi+fbM5qFlLD88yCUCEKJjcaEaIQXGhOiEc4mCP1MgtDNDJcIpEJf7JJ3rRU6Za+QKYu+OejkpOjRe+hRPrpJyjOb6nD60tnWw1QIgc+94QxcfMpCa183veclzsPly299oePJf/EtZ6M+Zmv9X6IuyQuWzcELnCiDQWPKKXQTB/tT+MrduyzF9rutnfhjez/e/pJSDux3HtiDVD7A3758fTH2zft3Y2FrI97yYqW8g1DiR4+147y184tKdiSTx2+3HMbrX7isqKgP9Kewaf8A3njOiiJRP9MxiM7hDF5j2C1bDw8jWwhxpaHYo47zZnnPqFPQBUSPwfiSaCGAs2MKHYDTJQWwl/xHOJ2yXAiF7kvolEInVbunh+6v0I/eQ4+sCNOGWb2gBRuWzrYefivmteCHf3kurnpBKQ2vqb4Ov/voJbgwRt7vPH+18+vj1CWzHMV/5oo51qIvQP2t1N/BYFSDKUvoUgKf+s1WCAF8/JWnAVArFb/wu+04bcksvG2jIvTukSx+9Fg73vjC5cXCUs8eGsJDu3rxnovXFicJ732+Gwf70/jLC9cUj/G7rZ3I5ENcYxQGihYAXf3CUtnOruEsGusSuMLwNYNQYlZTvbVQCFAkc3pMFa+YN8O54U9qm4kFMYV5Slur8xP/pIUzncm6VfNbnJojS+c0O+p0YWuTo2JnN9c7lsYM4ud8Q51wzlkImqgpe8V/UZFfHReTqFfMm4G5scnjC09eiK+87WxLZS9sbcIdH73E+TteeuqiY9qpncGoFaas5XLHs0dw344e/N/XbihOnP3wkX042J/GT973EiT0/XjDg3uQDyQ+euW64rY/39SBWU31eOf5q4uxp/YPYPncGVZGSn8yh9OXzrYmHaUEzj9pvpNDfen6hQ7ZXnpqm0MMl65b6GSQUB3Az13t2i3nEHZLfEIUAM5Y7irxFxB2Szn/3MlmWTTTOefVC2Y6aYfL5sxwFvwsmNnoXJeZjW4n9Mb6BBbOdL1ns2rj3JZGzJ/ZaMVesWEJsoXQsjlectICPP2pVzj7f+M53OqWMb0xZWXIt+7fgzOWz8a7LyiR8n07enDl6YtwkfHT+GB/Gm/duMJaqZgthHjXBasdonnXBaud/oTXnrfSIbg/I4jhVWcsdWIvN+yWCFS3b9JuiU2IAsA5q9yY74QoneFCTH4Sdgs5IUp45ZTdEvfPo7ro5jWd1VSPk9tarYfGKzYswQcuP9mKvev81bj7by61YqsWtOCDLz2FMzkYDExhhV4IQ3zhjWdZBFyfEPjHV59ujWusS+DDV6yzYk31CfzlRWutWHNDAtcYmSzRuKtfaBfVb6xP4Koz7WXODXUCV26wybsuIXD5qS55X7xuoRO74CQ3FrdqAFqhm556RGmmJ1yv68WYE6LRIhUz66Wpvg71CYGzjG3rEgJzWxrwothxT1nU6vyquHT9QudB8rZzVzp20AcuPxn5wC4b/A+vOh3pvF2N8tL1bc7Dr7E+4dhQDAajhClL6O++cE1pMlAz2Z9fsKZYzjWqKPj2l6wq2iNRVsFbN64seq5CqOXWbzxnubXcu7k+gSs3LLYIaWZTPc5bu8BS9nNaGnDFaYuscW2zmnDZ+jZrf6sXtuDS9W2WZ71h2WxccdoiqxTsi1bNxavOWGJ5zOeftABvfvEKSylfePJCvOeitZblcsHJC/C/X7Ee5xsZM2evmIv/eNNZVjrl6gUzcdN7zrNIec6MBtz5sUuw1qjDUpcQePATL3UKNP3mQxcjji/82VlO7M8vWOPELjzZfXjNaWnAHPCKRAajWggpZeVBQlwF4GsA6gB8T0r5b7H3mwDcBODFAPoAvE1K2T7WPjdu3Cg3bdp01CfcM5LFDQ/uwUevXF9MEUzlCvjOA3vx3kvWFsk2CCVufLQdb37xCotsf7W5A1ecZhP1gzt78MJVcy2i3npoCKtiqy07BlTbNHMl4FA6j4Y6Ya3QKwQhAinRVG/7yVJKtgYYDEZVEEI8JaXcSL5XidCFEHUAdgJ4OYAOqKbR10optxlj/hrAWVLK9wshrgHwRinl28ba73gJncFgME5kjEXoPpOi5wHYLaXcK6XMAbgFwNWxMVcD+JH+960AXiZYijIYDMYxhQ+hLwdg1o7t0DFyjJSyAGAIgJO6IYS4TgixSQixqafHbcHGYDAYjPHjmKYtSilvkFJulFJubGtzM0AYDAaDMX74EPohAGY+3wodI8cIIeoBzIGaHGUwGAzGMYIPoT8JYJ0QYq0QohHANQBui425DcC79b/fDOBe6ZM+w2AwGIyaoWIeupSyIIT4EIDfQ6Ut/kBK+ZwQ4jMANkkpbwPwfQA/FkLsBtAPRfoMBoPBOIbwWlgkpbwDwB2x2KeMf2cAvKW2p8ZgMBiMo8GUreXCYDAYDBteK0Un5MBC9ADYP87NFwLo9YgdzdjpHJts5zOZYpPtfCZTbLKdz2SKTdQ+fbBaSkmnCUopp9x/UN59xdjRjJ3Oscl2PpMpNtnOZzLFJtv5TKbYRO2z2v/YcmEwGIxpAiZ0BoPBmCaYqoR+g2fsaMZO59hkO5/JFJts5zOZYpPtfCZTbKL2WRWO26Qog8FgMGqLqarQGQwGgxEDEzqDwWBME0yaFnRCiB8AeC2AbinlGTr2Kx0LANwN4B1QdddfCyAEkATQBWAZgBYdywJoBIo9zQo6Xg9VuiDQrwUAidI1KOhYqLcVAPLGMU7RY3NQD8JQ76/OGCcBtOr3hf5/Ru8/YZyT1PsZhioznDBizcb5pfT+m/X7MI7fYIwL9H9NxrhA/03mtiNQuf9nGucR6nFNRmxEx+YbMfP8IqT18ZuNMVl9fkkdn6HH5gGMAugEcDpK178HwKNQn2m9cT79ULm60bUp6P1E1zAJ4AiAVcbfLfQ5SiOWMl436v1H5yONc88Z59So/x+NCY1xGajPBMa4AKXPW6L0/Yg+F/MzyOv3ZuhYEuozKUB9LtF3JwtVqroNQNR7sACgW2+/MHZtM1Cf2yJ9HaXevlX/7dHYHFR565nGOQTG+UXffQn1edXpcdG1DVH6/pnXO6GPGwBoB7DGuCYJ/feE+ppF39mc3qbUq7F0jOjcos8BKN1vgMrhnqm3j74TA1A8UKfjQl9fgdL3VEB954ahyn436dgw1HdzFoDF+px7oIoMLtLnE13DLn3s6N4EgF1QBQqj1wLq+9kH9X2XenyPcfxZUPf/XACHAXxDSvnVSh3ixsJkUug3ArgqFjsNwAcA7AbwKwAf17EPQV2gr0E11OgyYsMAfgpgD4BtUBf2xwC+od+Pxv0EwH/ocXv0uC/q//YAeFrHvgZgKxR5HULpRvkxgL0A3g/1BXwawHN67MehvtTdAP4fVIXKEOpLGAL4GwDXQ33p7oa6Uf8G6mEVAviKPvduAHdCfcm3Ajig93eLvj7/C8B2Pf5GPW63HvdRvb8cgM363P8G6ksW6tfb9Pjb9bi/0rH79fnnAFwHYId+L9rffv1+AcB/69gWqBsvDeA7UETSA+ApfbwfQBHOev237APwBShiOlPvZ1Qf5xtQN9VdepsP678xAUX0aQAf059DI9TNMKLf+w7UjXCLjm0B8LD+LH9mHOMrelwG6qYfAfB1fYzD+m/qBfBdHevW47qhvouAIoA01HfmB3p/P4P6Dn4F6jNO6P2kAXwEwDd1rEMf+2NQ36Mz9bn9jz72rVDEm4Z64PUCuE8fo19/ZjcC+KDerh7AoP57e/W/Z0J9znugCHUAwAMAZutr8qC+Lo/ofeT0+yNQ3+dmAD8H8Jje3wNQD8hQb9uvY9G2D+tzboQi7N0A/gB1zzygr9+PdQxQ390RqHvxXijyi46RQ+m7E51Tp/48onvw1/pvfa3e3xF9vgMA/kL/zQf1vr4E4E06tlcfLwtVd+oRqIfCB/S5/xLqPpujr0FKbx993of0mC8BeClKD/yfA/g3fT5pqPvwTqjP+X36eNu1YE3r8+8H8Hb9t79WCLEe6nvzKgAbAFwrhNgAT0waQpdSRl8QE8sA3KP/fTfUB7IM6sJkoG6iN0Hd/Fkjfr6OPQz14X8WwCtRUgoZAJ8ytm2HIqdvG7FIod8C4DUotqJGBuqDvcI4bgbAqVDkdDIUAW6B+mK9Ceop3AR1YwLAHwG8Gor09kB94X6lx4Z6v5FavVj/Dd+FuhG/A/VhQ18bCeA/9bZS/80NUMQQxQb0/x/R512Aurmg37tCvx9d63MBrNaxu1H6hfQm/X6j3j4P4PUoqTkB4HmoB3O93t9qfY2u0H8noFRUCiVCWQTgCb2fe6FuiEjhJAD8DsCfQZFZVr+3DepzjtRVAuomeY0e94z+/0r9mdQB+JMef6/eXz2UGIg+6zfocdHrhwFcqa/nMEq/4F6oY9069h0Al+q/ba6+Fv+pP6cG/bfm9WcSxZqgvjePQLV3hN7X/fp6XwhFogsA/ALAPKgH22yoX4vd+u/4H/151EP9WrlJ7+tZfZ3X6Nd7oCqnbtDHPwXqwXoYwDq93x4oUfKYvm4NUCryeqjv7AY9LgtVYXWTjs3R1/8WKKXapretB/BDfc2icbOgHtRJAEt0bAZUgb+n9Li5UPfY/+hr9wI9blj/NwhgLYCNUGR/DtRnvxzAS/S+lqPUjKcFwDellL/SsVMBXAbgcajv/+NQn3sL1D35Q/26APVQnAf1IM7q8zoJ6rv3TagHn9TX5XwA/ylV7avD+jjXQH1X74H6DpyhS4yn9efyhP4bVuj/fwSVO8SVxaQh9DJ4DsAr9L/fAvUlew4lQrsb6qIN6FgCwFIjtl7HonGS2HYIwAVQH97dUD+PWqE+xDzUl7tZj2vV254N9YWaAeDvdKxN768Z6gZo1GNOhbq5R6C+wHkoYj8d6obeA3VzXwd18yYBnIUSoS+AUjIrdOwtOhbGrs0CqN6vr4MilLdAPWDqoW6iYahUqToo5TTTOO+5en9f1ddrhnGMW/U20TH6oYgAUDfcPP3+Yv33XKCvezvUjdgIdaOsh1I97fo6nqa3h95fZEVs1WML+t9mTEB9/hHZtkCRfmSrLYci77y+htCxaH+vhfoORPsbhfp8C/pvO0VvEz00roB6IAHqs5uhj7MKJTQBeJsRmwl1c5uxJVAE9zZ93Mg2qIf6TKL7UEA9QOr0cS/X1/TP9fs3oWQttkA9TN+vjxnZGRcD+GcAl0B9F6NrtATqV8Asfbx5+jxn6f+EPu5sKFJt0cdcrK/nBmPbJihiPBNKYDXoY/QCeBFK9uVMvW0d1H3ZoPfTps9tsY6dD/UQM48xitIv7OV63ONQQilSzkv0tufo96N9bof6frXpa1IvpTwihFhjHHupPt4TKNk+twDFYoSv0+fUAqBJSnnE+FzmAFipYxfpc5wF9d37rBDidOM4iwDcJKU8BPXwXqCv1RCUk3AJ1IP6LiiRdxIqd4grj4lYfjre/6DUxFbj9WlQKi4N4NNQP0tOgyLBEMC/69hmqCdiCEUYUawX6gaOxgXGuCg2pP8zY0/rY0ooxdEHRSSRv3e9jj0DdfNHXt+IPu6gPlbkwaWgyg+ndfwbUF/0e6CshyyUUpRQvzp6oW7kDqib4zR9TgEUAUQKO7o2UexBfW3M2Fn6PHIo/RJ5GdQNk4b6uVuAuhH7UfJEA+NaF4z97YZSutFPz2hcj742N+txGSgVWdBj+6F+ufxYX4801C8iCUViT+uxX9D/74K6oQsA/kVv367PO4RSm/0o2S0FAF/Wsf36+JGHPayvc5/e9l+gHvgFqIdgoN8f1P8f0LFBPX5Q7zeao4msiX06dkTHCsY5R7E+KFVnxh7S5xTo88xBEUtaX8eCjv1e7y/6hdWh47/Qf3c3Sj7/w1DfiW/q/T6j38vr696h/9bo4dent/+p3n9eX7duqF8vI3rcI1C/uv5MXwcJRapRLLqOw/rcbzKu3xE97n3GuIz+bJNQ910e6vt+JHaMR6GskaeMbbei9Os31Nv+t95+L9T3alAfr1u/F91zrXpfUaygj9eqr2UWStjkoazJJJSlNaJjrfq45j5fCfXwCPXfNaiv/xE9LrKnFkM9QPfpbRug7JZ3Qtm+ka32LQC/hfLNIw58F5S3PvWX/kspn4dSJ3ugiGKPjn0V6svwff3eL6FuiBGoCx3F9kHdANG4gh4XbRtC3TD3xvb3C5RuzNlQH+YKlCZVv6bH3Qr1JctCfSjb9XHvhfpCDEB9WVIoTf6lobzaLqgbrB3qoXEH1E33uN5vuz7uEf03f1+fY6SGpHFtGvQ5PA1F1lHsiJRyCxRJ5qFUA6C88GiCMKfH/QnA51Eix8P6uO/UrxtQmgP4M/13CWPcU/ocPg1F+D+Fuqme1tvshiKHl+jrswfqSx9ATb5ugSK+i/W+b9fX7AjUQ2e33i56OK2EUoBzoVRUFuoBEfm2nShNnD4P5T8f0ON+ovfTpd8fhLIPdupxt+nYeTq+DcoL7daf0dP6evxUj7sMpTmXj+jjXaY/r5y+hs8b4+qgbt6MHiOhbJw6fV326nGzAPyXPh+pP9sslKAYgBIPN+n9RD7/eXofV+nPrRdKVd6njx+JoSYocgz0dhLq+7ED6lfLABROhnp4PgulOAtQqvNJPS6apI1+UV6BUmLAYj3+dmNcNH8Tfd5Sbzus9xdNnp6kz+EeY9vZ+jO6CyUSvxzqeyWgHvZdAP5Rn99BqHuvAPVr8Cf62NE8xJNQ9/oOAENSykH9eXxKj7ka6ldZ9Kv2Rr3PEX1u16M0VzOsj32Bfu8gSnNKCSjRMgJgREqZh+KJ10HZmGdLKS/U221H5Q5xZTGpCV0Isch4+UkA39axB6C+XJ+GUo5XQt3EjVA/h+7RsehnYzSuTo9rhvogD0DdcFHs3/S4yNOE3tcHoW7ISGl93hgXzeR36/O6EiXCXQT1wQ7r96JZ9c/p2BKoL0o91M/x70ERwn/r48wC8Bv9N78J6gvxNigLJ/L0AZX9sxfAv+rXiWicEGIp1MTNkN7mH6G+qPugHhrRuGVQN2NkN/xOH/ciHXsb1JftN/oYeX3+P9Tjop/tn4P6lXGJ/vt79bX9DdTP4/koZSV8TF+nbigSb4P6Sfp5fdzder//ovd5MUqkchfUxG8v1Bc+D2U1ROOizIwGKEK5CKVMmE/q65HQx2jQn+V/6XErob4Xn4P61dME9SAahPp+7dL7uRiKRD6pxwGK8BNQD+UBfY07oL57/4rSvMGZUN+B30N9nlv1fv8KiggfhCLbi/RnNQxFSIehrKxWfe7nQRF79EsI+pp9UV+bOn2Oy6C6ij2N0vxEFmrO4Wl9rHodezfU911CKfk2qHmMZ/V17oP6Lr8XylsP9HF2Qv36vEWPG9THeU9sXBLq1/gWfd5S///d+toV9DESUOJhE0ri6ntQ3vlzel+tAN6qr1kk2hYD+ATUQ3Kn3n8D1ET1tVDE+yOo72S7vh7PCSGiTJYjUFzwKNREZxLq/vqu3ufz0CJCSvkvUA+bfShZd7frcRn9Ob4bimtOArBdCCGg7LIrAHxESrlTCLFK/63/hsod4srjeNssxk+Lm/WFzEPdAO+FUn3RBz5MxAKom7nTiEU/xaKfllEset/8L/pJSsXC2DF6KoyLfo5HCjcwxj6oz9uMRZM75nkdhvrixP++bOw4/cTfEv0SMGMHoW5y8295L9SNWWncjtj+Igvpudi1jo4bwr42w7F9RpbU4Vgs+pUQ3z4Xu17U53IYJatnrM8lFztGZMUcgvu9ycf2l0HpJ3Y0LhP7TKLjxj+T6JebjO0vEzuXbVC/Os2/N4T6XvfGtj8MRQ7S2EcS6mFhxqIHpUTJpjLPM/o1a94bkU0lYf+90bamHRePZYx4l/FeMMa4KJYnzmXE2DYf24d5fmkiZo4L4V6XoMznVSDGjur/x++F6LrHY4XYsY9APRii71V07D1QD/xRfU1SAF6mufDVUA+iPQD+6Wh4lJf+MxgMxjTBpLZcGAwGg+EPJnQGg8GYJmBCZzAYjGkCJnQGg8GYJmBCZzAYjGkCJnQGg8GYJmBCZzAYjGmC/w/u4Vnf2MjfRwAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "popSN=newpop[newpop['Country Name'].str.contains('Sudan')] #smaller table for Sudan's data called popSN\n",
    "plt.plot(popSN.Year,popSN.Population); #plot Sudan's population data vs the years"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I was very sure there was an error somewhere in my code because, you know, urban population does not work like that i.e., change drastically from one year to another. So, first thing I thought about was looking at what the tables for both countries look like:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>108085352.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>Hong Kong SAR China</td>\n",
       "      <td>HKG</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>2620415.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>Macao SAR China</td>\n",
       "      <td>MAC</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>159890.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>110327936.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>362</th>\n",
       "      <td>Hong Kong SAR China</td>\n",
       "      <td>HKG</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>2702168.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15790</th>\n",
       "      <td>Hong Kong SAR China</td>\n",
       "      <td>HKG</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>7507400.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15840</th>\n",
       "      <td>Macao SAR China</td>\n",
       "      <td>MAC</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>640446.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16000</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>866705688.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16056</th>\n",
       "      <td>Hong Kong SAR China</td>\n",
       "      <td>HKG</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>7481800.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16106</th>\n",
       "      <td>Macao SAR China</td>\n",
       "      <td>MAC</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>649342.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>183 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              Country Name Country Code    Indicator Name Indicator Code  \\\n",
       "40                   China          CHN  Urban population    SP.URB.TOTL   \n",
       "96     Hong Kong SAR China          HKG  Urban population    SP.URB.TOTL   \n",
       "146        Macao SAR China          MAC  Urban population    SP.URB.TOTL   \n",
       "306                  China          CHN  Urban population    SP.URB.TOTL   \n",
       "362    Hong Kong SAR China          HKG  Urban population    SP.URB.TOTL   \n",
       "...                    ...          ...               ...            ...   \n",
       "15790  Hong Kong SAR China          HKG  Urban population    SP.URB.TOTL   \n",
       "15840      Macao SAR China          MAC  Urban population    SP.URB.TOTL   \n",
       "16000                China          CHN  Urban population    SP.URB.TOTL   \n",
       "16056  Hong Kong SAR China          HKG  Urban population    SP.URB.TOTL   \n",
       "16106      Macao SAR China          MAC  Urban population    SP.URB.TOTL   \n",
       "\n",
       "       Year   Population  \n",
       "40     1960  108085352.0  \n",
       "96     1960    2620415.0  \n",
       "146    1960     159890.0  \n",
       "306    1961  110327936.0  \n",
       "362    1961    2702168.0  \n",
       "...     ...          ...  \n",
       "15790  2019    7507400.0  \n",
       "15840  2019     640446.0  \n",
       "16000  2020  866705688.0  \n",
       "16056  2020    7481800.0  \n",
       "16106  2020     649342.0  \n",
       "\n",
       "[183 rows x 6 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popCA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>810732.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>216</th>\n",
       "      <td>South Sudan</td>\n",
       "      <td>SSD</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>248681.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>472</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>872667.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>482</th>\n",
       "      <td>South Sudan</td>\n",
       "      <td>SSD</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>252989.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>738</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1962</td>\n",
       "      <td>939444.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15644</th>\n",
       "      <td>South Sudan</td>\n",
       "      <td>SSD</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2018</td>\n",
       "      <td>2152927.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15900</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>14957232.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15910</th>\n",
       "      <td>South Sudan</td>\n",
       "      <td>SSD</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>2201250.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16166</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>15458183.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16176</th>\n",
       "      <td>South Sudan</td>\n",
       "      <td>SSD</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>2261021.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>122 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Country Name Country Code    Indicator Name Indicator Code  Year  \\\n",
       "206          Sudan          SDN  Urban population    SP.URB.TOTL  1960   \n",
       "216    South Sudan          SSD  Urban population    SP.URB.TOTL  1960   \n",
       "472          Sudan          SDN  Urban population    SP.URB.TOTL  1961   \n",
       "482    South Sudan          SSD  Urban population    SP.URB.TOTL  1961   \n",
       "738          Sudan          SDN  Urban population    SP.URB.TOTL  1962   \n",
       "...            ...          ...               ...            ...   ...   \n",
       "15644  South Sudan          SSD  Urban population    SP.URB.TOTL  2018   \n",
       "15900        Sudan          SDN  Urban population    SP.URB.TOTL  2019   \n",
       "15910  South Sudan          SSD  Urban population    SP.URB.TOTL  2019   \n",
       "16166        Sudan          SDN  Urban population    SP.URB.TOTL  2020   \n",
       "16176  South Sudan          SSD  Urban population    SP.URB.TOTL  2020   \n",
       "\n",
       "       Population  \n",
       "206      810732.0  \n",
       "216      248681.0  \n",
       "472      872667.0  \n",
       "482      252989.0  \n",
       "738      939444.0  \n",
       "...           ...  \n",
       "15644   2152927.0  \n",
       "15900  14957232.0  \n",
       "15910   2201250.0  \n",
       "16166  15458183.0  \n",
       "16176   2261021.0  \n",
       "\n",
       "[122 rows x 6 columns]"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popSN"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "And there, I realized what was wrong. It turns out there are independent territories in China and Sudan and their populations were mixing up, that's why I was getting the odd graphs above. \n",
    "I solved the issue by changing the code a bit, so instead of str.contains I used \"loc\":"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "popCA=newpop.loc[newpop['Country Name']=='China'] #finding the data for the country specifically called \"China\"\n",
    "popSN=newpop.loc[newpop['Country Name']=='Sudan'] #finding the data for the country specificaly called \"Sudan\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>108085352.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>306</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>110327936.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>572</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1962</td>\n",
       "      <td>114685540.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>838</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1963</td>\n",
       "      <td>121162226.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1104</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1964</td>\n",
       "      <td>127791981.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14936</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2016</td>\n",
       "      <td>787376534.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15202</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2017</td>\n",
       "      <td>809246214.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15468</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2018</td>\n",
       "      <td>829760595.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15734</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>848982855.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16000</th>\n",
       "      <td>China</td>\n",
       "      <td>CHN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>866705688.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Country Name Country Code    Indicator Name Indicator Code  Year  \\\n",
       "40           China          CHN  Urban population    SP.URB.TOTL  1960   \n",
       "306          China          CHN  Urban population    SP.URB.TOTL  1961   \n",
       "572          China          CHN  Urban population    SP.URB.TOTL  1962   \n",
       "838          China          CHN  Urban population    SP.URB.TOTL  1963   \n",
       "1104         China          CHN  Urban population    SP.URB.TOTL  1964   \n",
       "...            ...          ...               ...            ...   ...   \n",
       "14936        China          CHN  Urban population    SP.URB.TOTL  2016   \n",
       "15202        China          CHN  Urban population    SP.URB.TOTL  2017   \n",
       "15468        China          CHN  Urban population    SP.URB.TOTL  2018   \n",
       "15734        China          CHN  Urban population    SP.URB.TOTL  2019   \n",
       "16000        China          CHN  Urban population    SP.URB.TOTL  2020   \n",
       "\n",
       "        Population  \n",
       "40     108085352.0  \n",
       "306    110327936.0  \n",
       "572    114685540.0  \n",
       "838    121162226.0  \n",
       "1104   127791981.0  \n",
       "...            ...  \n",
       "14936  787376534.0  \n",
       "15202  809246214.0  \n",
       "15468  829760595.0  \n",
       "15734  848982855.0  \n",
       "16000  866705688.0  \n",
       "\n",
       "[61 rows x 6 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popCA #printing the new (fixed) table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>810732.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>472</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>872667.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>738</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1962</td>\n",
       "      <td>939444.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1004</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1963</td>\n",
       "      <td>1011470.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1270</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1964</td>\n",
       "      <td>1089191.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15102</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2016</td>\n",
       "      <td>13596343.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15368</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2017</td>\n",
       "      <td>14027565.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15634</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2018</td>\n",
       "      <td>14480887.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15900</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>14957232.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16166</th>\n",
       "      <td>Sudan</td>\n",
       "      <td>SDN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>15458183.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Country Name Country Code    Indicator Name Indicator Code  Year  \\\n",
       "206          Sudan          SDN  Urban population    SP.URB.TOTL  1960   \n",
       "472          Sudan          SDN  Urban population    SP.URB.TOTL  1961   \n",
       "738          Sudan          SDN  Urban population    SP.URB.TOTL  1962   \n",
       "1004         Sudan          SDN  Urban population    SP.URB.TOTL  1963   \n",
       "1270         Sudan          SDN  Urban population    SP.URB.TOTL  1964   \n",
       "...            ...          ...               ...            ...   ...   \n",
       "15102        Sudan          SDN  Urban population    SP.URB.TOTL  2016   \n",
       "15368        Sudan          SDN  Urban population    SP.URB.TOTL  2017   \n",
       "15634        Sudan          SDN  Urban population    SP.URB.TOTL  2018   \n",
       "15900        Sudan          SDN  Urban population    SP.URB.TOTL  2019   \n",
       "16166        Sudan          SDN  Urban population    SP.URB.TOTL  2020   \n",
       "\n",
       "       Population  \n",
       "206      810732.0  \n",
       "472      872667.0  \n",
       "738      939444.0  \n",
       "1004    1011470.0  \n",
       "1270    1089191.0  \n",
       "...           ...  \n",
       "15102  13596343.0  \n",
       "15368  14027565.0  \n",
       "15634  14480887.0  \n",
       "15900  14957232.0  \n",
       "16166  15458183.0  \n",
       "\n",
       "[61 rows x 6 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popSN #printing the new (fixed) table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great, that fixed the issue, now I'll print the plots but makes me think I should change the class a little:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Fixing the class \"fixplot\" a little so that it works fine with the above issue'''\n",
    "class fixplot: #defining the class fixplot\n",
    "    def __init__(self, xvalues, yvalues):  #defining __init__\n",
    "        self.xdata = xvalues   \n",
    "        self.ydata = yvalues  \n",
    "    def fixing(CountryName): #defining the method fixing that takes CountryName\n",
    "        pop1=newpop.loc[newpop['Country Name']==CountryName] #small table with the chosen country data but more exact/specific with the country's name this time.\n",
    "        pop1.index=pop1.index-min(pop1.index) #getting the indices to start from zero\n",
    "        desind=np.linspace(min(pop1.index),max(pop1.index),6,dtype=int)  #creating 6 equally spaced indices\n",
    "        plt.plot(pop1['Year'],pop1['Population'],'.') #plotting the plot urban pop vs years for the chosen country\n",
    "        plt.xticks(pop1.Year[desind],rotation=50) #using xticks to print 6 equally spaced dates at the indices generated above\n",
    "        plt.xlabel('Years') #label x-axis\n",
    "        plt.ylabel('Population') #label y-axis\n",
    "        plt.title('Urban Population in %s' %CountryName); #give the plot a title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fixplot.fixing('China') #checking if the new fixed method works properly"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fixplot.fixing(\"Sudan\") #checking that for Sudan too"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Amazing, everything looks fine now!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Conclusions"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "--For Lebanon: \n",
    "If we look at the top, we can notice that there's a slight decrease (or beginning of decrease) in urban population. Being a resident of Lebanon, I can tell you it's because of the economic and political crises Lebanon has been going through since 2019. I am pretty sure more recent data would show more decline because things have been becoming worse rather than improving, unfortunately.\n",
    "\n",
    "--For Ukraine: \n",
    "The web says that Ukraine's population (and obviously its urban population) has been declining since the 1990s because of high emigration rates, coupled with high death rates and low birth rates. Population shrinkage averaged 300,000 people annually since 1993. In 2007, the country's rate of population decline was the fourth highest in the world.\n",
    "\n",
    "--For Syria: \n",
    "Over the last decade, Syrians have faced mass displacement due to the devastating civil war that has taken place since 2012 up until today. However, that things are currently relatively better there, the urban population is going back to increasing– as seen in the plot. (I know that, last summer, Lebanese Security Forces were coordinating the return of many Syrian families to the \"safe\" regions in Syria) \n",
    "\n",
    "--Correlation Analysis:\n",
    "Now, that I have talked about both Syria and Lebanon, I can tell you about the meaning behind the correlation analysis result we got earlier in the notebook. (or at least what I think it means)\n",
    "So 2011-2014 was peak war time in Syria and as I would expect, many Syrians seeked refuge in Lebanon, which is a neighboring country to Syria. So the decrease of the Syrian urban population during war period should be strongly and negatively correlated with the urban population increase during that same period, which is consistent with what we got!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Truth Test Suit\n",
    "To prove that our code is working correctly, we would need to run some truth tests. I'll run 3 tests:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Truth Test 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here, I will test whether the correlation analysis code was working fine: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Creating a fake data set for truth testing purposes'''\n",
    "myfakedata={'x':[1,2,3,4,5],'y':[-2,-4,-6,-8,-10]} #creating a fake data of x and y values and calling it myfakedata\n",
    "myfakedata=pd.DataFrame(myfakedata) #changing myfakedata into a pandas table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>-4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>-8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>-10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x   y\n",
       "0  1  -2\n",
       "1  2  -4\n",
       "2  3  -6\n",
       "3  4  -8\n",
       "4  5 -10"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myfakedata #printing myfakedata"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-0.9999999999999999"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myfakedata['x'].corr(myfakedata['y'], method='pearson') #finding the correlation between x and y"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nice! we got a -1 correlation which means my code has passed the first test!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Truth Test 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For the second test, I will be testing the loc function:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To get the subtable for Lebanon, we used the code:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>764264.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>821157.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>662</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1962</td>\n",
       "      <td>880861.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>928</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1963</td>\n",
       "      <td>942378.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1194</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1964</td>\n",
       "      <td>1004429.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15026</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2016</td>\n",
       "      <td>5926427.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15292</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2017</td>\n",
       "      <td>6030303.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15558</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2018</td>\n",
       "      <td>6076955.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15824</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>6084990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16090</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>6069524.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Country Name Country Code    Indicator Name Indicator Code  Year  \\\n",
       "130        Lebanon          LBN  Urban population    SP.URB.TOTL  1960   \n",
       "396        Lebanon          LBN  Urban population    SP.URB.TOTL  1961   \n",
       "662        Lebanon          LBN  Urban population    SP.URB.TOTL  1962   \n",
       "928        Lebanon          LBN  Urban population    SP.URB.TOTL  1963   \n",
       "1194       Lebanon          LBN  Urban population    SP.URB.TOTL  1964   \n",
       "...            ...          ...               ...            ...   ...   \n",
       "15026      Lebanon          LBN  Urban population    SP.URB.TOTL  2016   \n",
       "15292      Lebanon          LBN  Urban population    SP.URB.TOTL  2017   \n",
       "15558      Lebanon          LBN  Urban population    SP.URB.TOTL  2018   \n",
       "15824      Lebanon          LBN  Urban population    SP.URB.TOTL  2019   \n",
       "16090      Lebanon          LBN  Urban population    SP.URB.TOTL  2020   \n",
       "\n",
       "       Population  \n",
       "130      764264.0  \n",
       "396      821157.0  \n",
       "662      880861.0  \n",
       "928      942378.0  \n",
       "1194    1004429.0  \n",
       "...           ...  \n",
       "15026   5926427.0  \n",
       "15292   6030303.0  \n",
       "15558   6076955.0  \n",
       "15824   6084990.0  \n",
       "16090   6069524.0  \n",
       "\n",
       "[61 rows x 6 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popLB=newpop.loc[newpop['Country Name']=='Lebanon'] #getting the data for Lebanon by specifying the country name\n",
    "popLB #printing the outcome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nice, we have 61 rows and 6 columns. Now, if the loc function is working properly, we should get the same number of rows (and columns) if we changed the criteria from country name to country code for instance. \n",
    "So to test this, I can say: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Country Name</th>\n",
       "      <th>Country Code</th>\n",
       "      <th>Indicator Name</th>\n",
       "      <th>Indicator Code</th>\n",
       "      <th>Year</th>\n",
       "      <th>Population</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>130</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1960</td>\n",
       "      <td>764264.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>396</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1961</td>\n",
       "      <td>821157.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>662</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1962</td>\n",
       "      <td>880861.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>928</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1963</td>\n",
       "      <td>942378.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1194</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>1964</td>\n",
       "      <td>1004429.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15026</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2016</td>\n",
       "      <td>5926427.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15292</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2017</td>\n",
       "      <td>6030303.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15558</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2018</td>\n",
       "      <td>6076955.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15824</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2019</td>\n",
       "      <td>6084990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16090</th>\n",
       "      <td>Lebanon</td>\n",
       "      <td>LBN</td>\n",
       "      <td>Urban population</td>\n",
       "      <td>SP.URB.TOTL</td>\n",
       "      <td>2020</td>\n",
       "      <td>6069524.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>61 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Country Name Country Code    Indicator Name Indicator Code  Year  \\\n",
       "130        Lebanon          LBN  Urban population    SP.URB.TOTL  1960   \n",
       "396        Lebanon          LBN  Urban population    SP.URB.TOTL  1961   \n",
       "662        Lebanon          LBN  Urban population    SP.URB.TOTL  1962   \n",
       "928        Lebanon          LBN  Urban population    SP.URB.TOTL  1963   \n",
       "1194       Lebanon          LBN  Urban population    SP.URB.TOTL  1964   \n",
       "...            ...          ...               ...            ...   ...   \n",
       "15026      Lebanon          LBN  Urban population    SP.URB.TOTL  2016   \n",
       "15292      Lebanon          LBN  Urban population    SP.URB.TOTL  2017   \n",
       "15558      Lebanon          LBN  Urban population    SP.URB.TOTL  2018   \n",
       "15824      Lebanon          LBN  Urban population    SP.URB.TOTL  2019   \n",
       "16090      Lebanon          LBN  Urban population    SP.URB.TOTL  2020   \n",
       "\n",
       "       Population  \n",
       "130      764264.0  \n",
       "396      821157.0  \n",
       "662      880861.0  \n",
       "928      942378.0  \n",
       "1194    1004429.0  \n",
       "...           ...  \n",
       "15026   5926427.0  \n",
       "15292   6030303.0  \n",
       "15558   6076955.0  \n",
       "15824   6084990.0  \n",
       "16090   6069524.0  \n",
       "\n",
       "[61 rows x 6 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "popLB=newpop.loc[newpop['Country Code']=='LBN'] #getting the data for Lebanon by specifying the country code\n",
    "popLB #printing the outcome "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Great! I got the exact same table with the same number of rows and columns, which means code passed the second truth test!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Truth Test 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this one, I will just add a fake column with some country names and use loc and prove that I am really getting the columns I am asking for through my code: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "'''Modifying myfakedata for the third truth test'''\n",
    "myfakedata={'x':[1,2,3,4,5],'y':[-2,-4,-6,-8,-10],'Country Name':['Lebanon','Syria','Lebanon','Lebanon','Syria']} #adding a new fake column with random country names\n",
    "myfakedata=pd.DataFrame(myfakedata) #making the new fake data set, a pandas table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>Country Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-2</td>\n",
       "      <td>Lebanon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>-4</td>\n",
       "      <td>Syria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>Lebanon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>-8</td>\n",
       "      <td>Lebanon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>-10</td>\n",
       "      <td>Syria</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x   y Country Name\n",
       "0  1  -2      Lebanon\n",
       "1  2  -4        Syria\n",
       "2  3  -6      Lebanon\n",
       "3  4  -8      Lebanon\n",
       "4  5 -10        Syria"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "myfakedata"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, let's see if I'll actually get all the rows for Lebanon, for example, when we ask for that using my code: "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x</th>\n",
       "      <th>y</th>\n",
       "      <th>Country Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>-2</td>\n",
       "      <td>Lebanon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>-6</td>\n",
       "      <td>Lebanon</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>-8</td>\n",
       "      <td>Lebanon</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   x  y Country Name\n",
       "0  1 -2      Lebanon\n",
       "2  3 -6      Lebanon\n",
       "3  4 -8      Lebanon"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Performing the truth test'''\n",
    "fakeLB=myfakedata.loc[myfakedata['Country Name']=='Lebanon'] #getting the fake data about Lebanon\n",
    "fakeLB #printing the (fake) outcome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Nice! The code returned the rows pertaining to Lebanon, as expected, and for this, it passed the third test!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Fourth Test:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this last test, it will be more of a data test (checked with Andrea and she was ok with this). I will basically look up the urban population from a credible source online for a certain country and see if it matches my data:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16090    6069524.0\n",
       "Name: Population, dtype: float64"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'''Performing the fourth truth test'''\n",
    "desind=popLB.loc[popLB['Year']=='2020'] #getting the desired row containing the population value in Lebanon for 2020\n",
    "desind['Population'] #printing the population value for that row"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://www.macrotrends.net/countries/LBN/lebanon/urban-population#:~:text=Lebanon%20urban%20population%20for%202020,a%200.77%25%20increase%20from%202017.\n",
    "\n",
    "https://tradingeconomics.com/lebanon/urban-population-wb-data.html\n",
    "\n",
    "These two websites clearly state the number we got above for the urban population in Lebanon for the year 2020, which adds to the data's credibility. (we could do that for more countries but due to the limitations of time and space, I will just use this example)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "all tests should be related to the code you used. you should fix test above by making a correlation analysis with the fake data instead of slope\n",
    "other ideas:\n",
    "-use country code with loc, you should get the same number of columns and rows\n",
    "-check population online and make sure it matches what we have\n",
    "-add column with country names to myfakedata and then show that loc really does call them"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "python-3.7.7",
   "language": "python",
   "name": "python-3.7.7"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
